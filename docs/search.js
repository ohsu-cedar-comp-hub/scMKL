window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "scmkl", "modulename": "scmkl", "kind": "module", "doc": "<h1 align=\"center\">\n<img src=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/scMKL_logo.png?raw=true\" width=\"500\"/>\n</h1><br>\n\n<p><img src=\"https://img.shields.io/pypi/v/scmkl?label=pypi%20package\" alt=\"PyPI\" />\n<img src=\"https://img.shields.io/pypi/dm/scmkl\" alt=\"PyPI - Downloads\" />\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/version.svg\" alt=\"Anaconda-Server Badge\" /></a>\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/downloads.svg\" alt=\"Anaconda-Server Badge\" /></a>\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/latest_release_date.svg\" alt=\"Anaconda-Server Badge\" /></a></p>\n\n<p>Single-cell analysis using Multiple Kernel Learning, scMKL, is a binary classification algorithm utilizing prior information to group features to enhance classification and aid understanding of distinguishing features in multi-omic data sets.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"conda-install\">Conda install</h3>\n\n<p>Conda is the recommended method to install scMKL:</p>\n\n<pre><code>conda create -n scMKL python=3.12 \nconda activate scMKL\nconda install -c conda-forge ivango17::scmkl\n</code></pre>\n\n<h3 id=\"pip-install\">Pip install</h3>\n\n<p>First, create a virtual environment with <code>python&gt;=3.11.1,&lt;3.13</code>.</p>\n\n<p>Then, install scMKL with:</p>\n\n<pre><code># activate your new env with python&gt;=3.11.1 and &lt;3.13\npip install scmkl\n</code></pre>\n\n<p>If wheels do not build correctly, ensure <code>gcc</code> and <code>g++</code> are installed and up to date. They can be installed with <code>sudo apt install gcc</code> and <code>sudo apt install g++</code>.</p>\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>scMKL takes advantage of AnnData objects and can be implemented with just four pieces of data:</p>\n\n<p>1) scRNA and/or scATAC matrices (can be <code>scipy.sparse</code> matrix)</p>\n\n<p>2) An array of cell labels</p>\n\n<p>3) An array of feature names (eg. gene symbols for RNA or peaks for ATAC)</p>\n\n<p>4) A grouping dictionary where {'group_1' : [feature_5, feature_16], 'group_2' : [feature_1, feature_4, feature_9]}</p>\n\n<p>For more information on formatting/creating the grouping dictionaries, see our example for creating an <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/example/getting_RNA_groupings.ipynb\">RNA grouping</a> or <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/example/getting_ATAC_groupings.ipynb\">ATAC grouping</a>.</p>\n\n<p>For implementing scMKL, see our examples for your use case in <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/tree/main/example\">examples</a>.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<p>Repo: <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL\">https://github.com/ohsu-cedar-comp-hub/scMKL</a></p>\n\n<p>PyPI: <a href=\"https://pypi.org/project/scmkl/\">https://pypi.org/project/scmkl/</a></p>\n\n<p>Anaconda: <a href=\"https://anaconda.org/ivango17/scmkl\">https://anaconda.org/ivango17/scmkl</a></p>\n\n<p>API: <a href=\"https://ohsu-cedar-comp-hub.github.io/scMKL/\">https://ohsu-cedar-comp-hub.github.io/scMKL/</a></p>\n\n<h2 id=\"publication\">Publication</h2>\n\n<p>If you use scMKL in your research, please cite using:</p>\n\n<blockquote>\n  <p>Kupp, S., VanGordon, I., G\u00f6nen, M., Esener, S.,  Eksi, S., Ak, C. \n  Interpretable and integrative analysis of single-cell multiomics with scMKL. <em>Commun Biol</em> <strong>8</strong>, 1160 (2025). \n  <a href=\"https://doi.org/10.1038/s42003-025-08533-7\">https://doi.org/10.1038/s42003-025-08533-7</a></p>\n</blockquote>\n\n<p>Our Shiny for Python application for viewing data produced from this work can be found here: <a href=\"https://huggingface.co/spaces/scMKL-team/scMKL_analysis\">scMKL_analysis</a></p>\n\n<hr />\n\n<h2 id=\"scmkl-documentation\"><strong>scMKL Documentation</strong></h2>\n"}, {"fullname": "scmkl.calculate_z", "modulename": "scmkl", "qualname": "calculate_z", "kind": "function", "doc": "<p>Function to calculate Z matrices for all groups in both training \nand testing data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\ncreated by <code>scmkl.create_adata()</code> with <code>adata.uns.keys()</code>: \n<code>'train_indices'</code>, and <code>'test_indices'</code>.</li>\n<li><strong>n_features</strong> (int):\nNumber of random feature to use when calculating Z; used for \nscalability.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>,\n<code>batch_size</code> will be reduced to \n<code>int(num_training_cells / batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>adata</code> with Z matrices accessible with <code>adata.uns['Z_train']</code> \nand <code>adata.uns['Z_test']</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;Z_train&#39;, &#39;Z_test&#39;, &#39;sigmas&#39;, &#39;train_indices&#39;, </span>\n<span class=\"go\">&#39;test_indices&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata", "modulename": "scmkl", "qualname": "create_adata", "kind": "function", "doc": "<p>Function to create an AnnData object to carry all relevant \ninformation going forward.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (scipy.sparse.csc_matrix | np.ndarray | pd.DataFrame):\nA data matrix of cells by features (sparse array \nrecommended for large datasets).</li>\n<li><strong>feature_names</strong> (np.ndarray):\nArray of feature names corresponding with the features \nin <code>X</code>.</li>\n<li><strong>cell_labels</strong> (np.ndarray):\nA numpy array of cell phenotypes corresponding with \nthe cells in <code>X</code>.</li>\n<li><strong>group_dict</strong> (dict):\nDictionary containing feature grouping information (i.e. \n<code>{geneset1: np.array([gene_1, gene_2, ..., gene_n]), geneset2: \nnp.array([...]), ...}</code>.</li>\n<li><strong>scale_data</strong> (bool):\nIf <code>True</code>, data matrix is log transformed and standard \nscaled.</li>\n<li><strong>split_data</strong> (None | np.ndarray):\nIf <code>None</code>, data will be split stratified by cell labels. \nElse, is an array of precalculated train/test split \ncorresponding to samples. Can include labels for entire\ndataset to benchmark performance or for only training\ndata to classify unknown cell types (i.e. <code>np.array(['train', \n'test', ..., 'train'])</code>.</li>\n<li><strong>D</strong> (int):\nNumber of Random Fourier Features used to calculate Z. \nShould be a positive integer. Higher values of D will \nincrease classification accuracy at the cost of computation \ntime. If set to <code>None</code>, will be calculated given number of \nsamples.</li>\n<li><strong>remove_features</strong> (bool):\nIf <code>True</code>, will remove features from <code>X</code> and <code>feature_names</code> \nnot in <code>group_dict</code> and remove features from groupings not in \n<code>feature_names</code>.</li>\n<li><strong>train_ratio</strong> (float):\nRatio of number of training samples to entire data set. Note:\nif a threshold is applied, the ratio training samples may \ndecrease depending on class balance and <code>class_threshold</code>\nparameter if <code>allow_multiclass = True</code>.</li>\n<li><strong>distance_metric</strong> (str):\nThe pairwise distance metric used to estimate sigma. Must\nbe one of the options used in <code>scipy.spatial.distance.cdist</code>.</li>\n<li><strong>kernel_type</strong> (str):\nThe approximated kernel function used to calculate Zs.\nMust be one of <code>'Gaussian'</code>, <code>'Laplacian'</code>, or <code>'Cauchy'</code>.</li>\n<li><strong>random_state</strong> (int):\nInteger random_state used to set the seed for \nreproducibilty.</li>\n<li><strong>allow_multiclass</strong> (bool):\nIf <code>False</code>, will ensure that cell labels are binary.</li>\n<li><strong>class_threshold</strong> (str | int):\nNumber of samples allowed in the training data for each cell\nclass in the training data. If <code>'median'</code>, the median number \nof cells per cell class will be the threshold for number of \nsamples per class.</li>\n<li><strong>reduction</strong> (str | None):\nChoose which dimension reduction technique to perform on \nfeatures within a group. 'svd' will run \n<code>sklearn.decomposition.TruncatedSVD</code>, 'linear' will multiply \nby an array of 1s down to 50 dimensions.</li>\n<li><strong>tfidf</strong> (bool):\nWhether to calculate TFIDF transformation on peaks within \ngroupings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>adata</strong> (ad.AnnData):\nAnnData with the following attributes and keys:</p>\n\n<p><code>adata.X</code> (array_like):\n    Data matrix.</p>\n\n<p><code>adata.var_names</code> (array_like): \n    Feature names corresponding to <code>adata.X</code>.</p>\n\n<p><code>adata.obs['labels']</code> (array_like):\n    cell classes/phenotypes from <code>cell_labels</code>.</p>\n\n<p><code>adata.uns['train_indices']</code> (array_like):\n    Indices for training data. </p>\n\n<p><code>adata.uns['test_indices']</code> (array_like)\n    Indices for testing data.</p>\n\n<p><code>adata.uns['group_dict']</code> (dict):\n    Grouping information.</p>\n\n<p><code>adata.uns['seed_obj']</code> (np.random._generator.Generator): \n    Seed object with seed equal to 100 * <code>random_state</code>.</p>\n\n<p><code>adata.uns['D']</code> (int):\n    Number of dimensions to scMKL with.</p>\n\n<p><code>adata.uns['scale_data']</code> (bool):\n    Whether or not data is log and z-score transformed.</p>\n\n<p><code>adata.uns['distance_metric']</code> (str): \n    Distance metric as given.</p>\n\n<p><code>adata.uns['kernel_type']</code> (str): \n    Kernel function as given.</p>\n\n<p><code>adata.uns['svd']</code> (bool): \n    Whether to calculate SVD reduction.</p>\n\n<p><code>adata.uns['tfidf']</code> (bool): \n    Whether to calculate TF-IDF per grouping.</p></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_mat</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">load_npz</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_RNA_matrix.npz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_names</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_gene_names.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;hallmark_genesets.pkl&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">&gt;&gt;&gt; </span>                     <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 4341</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;group_dict&#39;, &#39;seed_obj&#39;, &#39;scale_data&#39;, &#39;D&#39;, &#39;kernel_type&#39;, </span>\n<span class=\"go\">&#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">group_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">scale_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">split_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_features</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">train_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">allow_multiclass</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">class_threshold</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;median&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reduction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma", "modulename": "scmkl", "qualname": "estimate_sigma", "kind": "function", "doc": "<p>Calculate kernel widths to inform distribution for projection of \nFourier Features. Calculates one sigma per group of features.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nCreated by <code>create_adata</code>.</li>\n<li><strong>n_features</strong> (int):\nNumber of random features to include when estimating sigma. \nWill be scaled for the whole pathway set according to a \nheuristic. Used for scalability.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches</code> * <code>batch_size</code> &gt; # training cells,\n<code>batch_size</code> will be reduced to <code>int(num training cells / \nbatches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nKey added <code>adata.uns['sigma']</code> with grouping kernel widths.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"p\">[</span><span class=\"s1\">&#39;sigma&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">array([10.4640895 , 10.82011454,  6.16769438,  9.86156855, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings", "modulename": "scmkl", "qualname": "get_region_groupings", "kind": "function", "doc": "<p>Creates a peak set where keys are gene set names from <code>gene_sets</code> \nand values are arrays of features pulled from <code>feature_names</code>. \nFeatures are added to each peak set given overlap between regions \nin single-cell data matrix and inferred gene promoter regions in \n<code>gene_anno</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gene_anno</strong> (pd.DataFrame):\nGene annotations in GTF format as a pd.DataFrame with columns\n<code>['chr', 'start', 'end', 'strand', 'gene_name']</code>.</li>\n<li><strong>gene_sets</strong> (dict):\nGene set names as keys and an iterable object of gene names\nas values.</li>\n<li><strong>feature_names</strong> (array_like | set):\nFeature names corresponding to a single_cell epigenetic data \nmatrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>epi_grouping</strong> (dict):\nKeys are the names from <code>gene_sets</code> and values\nare a list of regions from <code>feature_names</code> that overlap with \npromotor regions respective to genes in <code>gene_sets</code> (i.e., if \nregion in <code>feature_names</code> overlaps with promotor region from a \ngene in a gene set from <code>gene_sets</code>, that region will be added \nto the new dictionary under the respective gene set name).</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in a gene set and the peak names from dataset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/RNA_hallmark_groupings.pkl&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                    <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/MCF7_region_names.npy&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in GTF file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;data/hg38_subset_protein_coding.annotation.gtf&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_gtf</span><span class=\"p\">(</span><span class=\"n\">gtf_path</span><span class=\"p\">,</span> <span class=\"n\">filter_to_coding</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">region_grouping</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_region_groupings</span><span class=\"p\">(</span><span class=\"n\">gene_anno</span> <span class=\"o\">=</span> <span class=\"n\">gtf</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">gene_sets</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peaks</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">region_grouping</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;HALLMARK_TNFA_SIGNALING_VIA_NFKB&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">gene_sets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.multimodal_processing", "modulename": "scmkl", "qualname": "multimodal_processing", "kind": "function", "doc": "<p>Combines and processes a list of <code>ad.AnnData</code> objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[ad.AnnData]):\nList of <code>ad.AnnData</code> objects where each object is a different \nmodality. Annotations must match between objects (i.e. same \nsample order).</li>\n<li><strong>names</strong> (list[str]):\nList of strings names for each modality repective to each \nobject in adatas.</li>\n<li><strong>combination</strong> (str):\nHow to combine the matrices, either <code>'sum'</code> or <code>'concatenate'</code>.</li>\n<li><strong>tfidf</strong> (list[bool]):\nIf element <code>i</code> is <code>True</code>, <code>adata[i]</code> will be TF-IDF normalized.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>, <code>batch_size</code> \nwill be reduced to <code>int(num_training_cells / batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nConcatenated from objects from <code>adatas</code> with Z matrices \ncalculated.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rna_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_rna_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">rna_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_atac_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peak_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">atac_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rna_adata</span><span class=\"p\">,</span> <span class=\"n\">atac_adata</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mod_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atac&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">multimodal_processing</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"n\">adatas</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">mod_names</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 12676</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">var: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;D&#39;, &#39;kernel_type&#39;, &#39;distance_metric&#39;, &#39;train_indices&#39;,  </span>\n<span class=\"go\">&#39;test_indices&#39;, &#39;Z_train&#39;, &#39;Z_test&#39;, &#39;group_dict&#39;, &#39;seed_obj&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;concatenate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest", "modulename": "scmkl", "qualname": "one_v_rest", "kind": "function", "doc": "<p>For each cell class, creates model(s) comparing that class to all \nothers. Then, predicts on the training data using <code>scmkl.run()</code>.\nOnly labels in both training and testing will be run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[AnnData]):\nList of <code>ad.AnnData</code> objects created by <code>create_adata()</code> \nwhere each <code>ad.AnnData</code> is one modality and composed of both \ntraining and testing samples. Requires that <code>'train_indices'</code>\nand <code>'test_indices'</code> are the same between all <code>ad.AnnData</code>s.</li>\n<li><strong>names</strong> (list[str]):\nString variables that describe each modality respective to \n<code>adatas</code> for labeling.</li>\n<li><strong>alpha_list</strong> (np.ndarray | float):\nAn array of alpha values to create each model with or a float \nto run with a single alpha.</li>\n<li><strong>tfidf</strong> (list[bool]):\nIf element <code>i</code> is <code>True</code>, <code>adatas[i]</code> will be TF-IDF \nnormalized.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation. \nThis will average the result of <code>batches</code> distance calculations \nof <code>batch_size</code> randomly sampled cells. More batches will \nconverge to population distance values at the cost of \nscalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>,\n<code>batch_size</code> will be reduced to \n<code>int(num_training_cells / batches)</code>.</li>\n<li><strong>force_balance</strong> (bool):\nIf <code>True</code>, training sets will be balanced to reduce class label \nimbalance. Defaults to <code>False</code>.</li>\n<li><strong>other_factor</strong> (float):\nThe ratio of cells to sample for the other class for each \nmodel. For example, if classifying B cells with 100 B cells in \ntraining, if <code>other_factor=1</code>, 100 cells that are not B cells \nwill be trained on with the B cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nContains keys for each cell class with results from cell class\nversus all other samples. See <code>scmkl.run()</code> for futher details. \nWill also include a probablilities table with the predictions \nfrom each model.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">one_v_rest</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">adata</span><span class=\"p\">],</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;B cells&#39;, &#39;Monocytes&#39;, &#39;Dendritic cells&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">force_balance</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">other_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_alpha", "modulename": "scmkl", "qualname": "optimize_alpha", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding best performing sparsity. This function \ncurrently only works for binary experiments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData | list[ad.AnnData]):\n<code>ad.AnnData</code>(s) with <code>'Z_train'</code> and <code>'Z_test'</code> in \n<code>adata.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>tfidf</strong> (list | bool):\nIf <code>False</code>, no data will be TF-IDF transformed. If \n<code>type(adata) is list</code> and TF-IDF transformation is desired for \nall or some of the data, a bool list corresponding to <code>adata</code> \nmust be provided. To simply TF-IDF transform <code>adata</code> when \n<code>type(adata) is ad.AnnData</code>, use <code>True</code>.</li>\n<li><strong>alpha_array</strong> (np.ndarray):\nArray of all alpha values to be tested.</li>\n<li><strong>k</strong> (int):\nNumber of folds to perform cross validation over.</li>\n<li><strong>metric</strong> (str):\nWhich metric to use to optimize alpha. Options are <code>'AUROC'</code>, \n<code>'Accuracy'</code>, <code>'F1-Score'</code>, <code>'Precision'</code>, and <code>'Recall'</code>.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability. If \n<code>batches*batch_size &gt; num_training_cells</code>, <code>batch_size</code> will be \nreduced to <code>int(num_training_cells/batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_star</strong> (float):\nThe best performing alpha value from cross validation on \ntraining data.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_alpha</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span>\n<span class=\"go\">0.1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUROC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_sparsity", "modulename": "scmkl", "qualname": "optimize_sparsity", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding the desired sparsity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>ad.AnnData</code> with <code>'Z_train'</code> and <code>'Z_test'</code> in \n<code>adata.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>starting_alpha</strong> (float):\nThe alpha value to start the search at.</li>\n<li><strong>increment</strong> (float):\nAmount to adjust alpha by between iterations.</li>\n<li><strong>target</strong> (int):\nThe desired number of groups selected by the model.</li>\n<li><strong>n_iter</strong> (int):\nThe maximum number of iterations to run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sparsity_dict</strong> (dict):\nTested alpha as keys and the number of selected groups as \nthe values.</li>\n<li><strong>alpha</strong> (float):\nThe alpha value yielding the number of selected groups closest \nto the target.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sparcity_dict</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_sparsity</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                               <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span>\n<span class=\"go\">0.01</span>\n</code></pre>\n</div>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>celer.GroupLasso</code>:  <a href=\"https://mathurinm.github.io/celer/\">https://mathurinm.github.io/celer/</a>  </p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">starting_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.9</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.read_gtf", "modulename": "scmkl", "qualname": "read_gtf", "kind": "function", "doc": "<p>Reads and formats a gtf file. Adds colnames: <code>['chr', 'source', \n'feature', 'start', 'end', 'score', 'strand', 'frame', \n'attribute']</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nThe file path to the gtf file to be read in. If the file is \ngzipped, file name must end with .gz.</li>\n<li><strong>filter_to_coding</strong> (bool):\nIf <code>True</code>, will filter rows in gtf data frame to only \nprotein coding genes. Will add column <code>'gene_name'</code> containing \nthe gene name for each row.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA pandas dataframe of the input gtf file.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">scmkl</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/hg38_subset_protein_coding.annotation.gtf&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_gtf</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">        chr  source     feature  start    end score strand frame                                          </span>\n<span class=\"go\">0  chr1  HAVANA        gene  11869  14409     .      +     .  </span>\n<span class=\"go\">1  chr1  HAVANA  transcript  11869  14409     .      +     .  </span>\n<span class=\"go\">2  chr1  HAVANA        exon  11869  12227     .      +     .  </span>\n<span class=\"go\">3  chr1  HAVANA        exon  12613  12721     .      +     .  </span>\n<span class=\"go\">4  chr1  HAVANA        exon  13221  14409     .      +     .  </span>\n<span class=\"go\">attribute</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; gene_type &quot;transc...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filter_to_coding</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.run", "modulename": "scmkl", "qualname": "run", "kind": "function", "doc": "<p>Wrapper function for training and test with multiple alpha values.\nReturns metrics, predictions, group weights, and resource usage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nA processed <code>ad.AnnData</code> with <code>'Z_train'</code>, <code>'Z_test'</code>, and \n<code>'group_dict'</code> keys in <code>adata.uns</code>.</li>\n<li><strong>alpha_list</strong> (np.ndarray):\nSparsity values to create models with. Alpha refers to the \npenalty parameter in Group Lasso. Larger alphas force group \nweights to shrink towards zero while smaller alphas apply a \nlesser penalty to kernal weights. Values too large will results \nin models that weight all groups as zero.</li>\n<li><strong>metrics</strong> (list[str]):\nMetrics that should be calculated on predictions. Options are \n<code>['AUROC', 'F1-Score', 'Accuracy', 'Precision', 'Recall']</code>. \nWhen set to <code>None</code>, all metrics are calculated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>results</strong> (dict):\nResults with keys and values: </p>\n\n<p><code>'Metrics'</code> (dict): \nA nested dictionary as <code>[alpha][metric] = value</code>.</p>\n\n<p><code>'Group_names'</code> (np.ndarray): \nArray of group names used in model(s).</p>\n\n<p><code>'Selected_groups'</code> (dict): \nA nested dictionary as <code>[alpha] = np.array([nonzero_groups])</code>.\nNonzero groups are groups that had a kernel weight above zero.</p>\n\n<p><code>'Norms'</code> (dict): \nA nested dictionary as <code>[alpha] = np.array([kernel_weights])</code>\nOrder of <code>kernel_weights</code> is respective to <code>'Group_names'</code> \nvalues.</p>\n\n<p><code>'Observed'</code> (np.nparray): \nAn array of ground truth cell labels from the test set.</p>\n\n<p><code>'Predictions'</code> (dict): \nA nested dictionary as <code>[alpha] = predicted_class</code> respective \nto <code>'Observations'</code> for <code>alpha</code>.</p>\n\n<p><code>'Test_indices'</code> (np.array: \nIndices of samples respective to adata used in the training \nset.</p>\n\n<p><code>'Model'</code> (dict): \nA nested dictionary where <code>[alpha] = celer.GroupLasso</code> object \nfor <code>alpha</code>.</p>\n\n<p><code>'RAM_usage'</code> (dict): \nA nested dictionary with memory usage in GB after \ntraining models for each <code>alpha</code>.</p></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">adata</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                    <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span>\n<span class=\"go\">dict_keys([&#39;Metrics&#39;, &#39;Selected_groups&#39;, &#39;Norms&#39;, &#39;Predictions&#39;, </span>\n<span class=\"go\">...        &#39;Observed&#39;, &#39;Test_indices&#39;, &#39;Group_names&#39;, &#39;Models&#39;, </span>\n<span class=\"go\">...        &#39;Train_time&#39;, &#39;RAM_usage&#39;])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span> <span class=\"n\">values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([0.05, 0.1, 0.5])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">][</span><span class=\"mf\">0.05</span><span class=\"p\">]</span>\n<span class=\"go\">{&#39;AUROC&#39;: 0.9859,</span>\n<span class=\"go\">&#39;Accuracy&#39;: 0.945,</span>\n<span class=\"go\">&#39;F1-Score&#39;: 0.9452736318407959,</span>\n<span class=\"go\">&#39;Precision&#39;: 0.9405940594059405,</span>\n<span class=\"go\">&#39;Recall&#39;: 0.95}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_probs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize", "modulename": "scmkl", "qualname": "tfidf_normalize", "kind": "function", "doc": "<p>Function to TF-IDF normalize the data in an adata object. If any \nrows are entirely 0, that row and its metadata will be removed from\nthe object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>ad.Anndata</code> with <code>.X</code> to be normalized. If <code>'train_indices'</code> \nand <code>'test_indices'</code> in <code>'adata.uns.keys()'</code>, normalization \nwill be done separately for the training and testing data. \nOtherwise, it will calculate it on the entire dataset.</li>\n<li><strong>binarize</strong> (bool):\nIf <code>True</code>, all values in <code>adata.X</code> greater than 1 will become \n1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>adata</code> with <code>adata.X</code> TF-IDF normalized. Will now have the \ntrain data stacked on test data, and the indices will be \nadjusted accordingly.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">tfidf_normalize</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>, </span><span class=\"param\"><span class=\"n\">binarize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.train_model", "modulename": "scmkl", "qualname": "train_model", "kind": "function", "doc": "<p>Fit a grouplasso model to the provided data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nHas <code>'Z_train'</code> and <code>'Z_test'</code> keys in <code>.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>alpha</strong> (float):\nGroup Lasso regularization coefficient, is a floating point \nvalue controlling model solution sparsity. Must be a positive \nfloat. The smaller the value, the more feature groups will be \nselected in the trained model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nTrained model accessible with <code>adata.uns['model']</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>           <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_d</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">d</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">group_size</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;model&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>celer</code>: \n<a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">https://mathurinm.github.io/celer/generated/celer.GroupLasso.html</a>  </p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.calculate_z", "modulename": "scmkl.calculate_z", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.calculate_z.get_z_indices", "modulename": "scmkl.calculate_z", "qualname": "get_z_indices", "kind": "function", "doc": "<p>Takes the number associated with the group as <code>m</code> and returns the \nindices for cos and sin functions to be applied.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (int):\nThe chronological number of the group being processed.</li>\n<li><strong>D</strong> (int):\nThe number of dimensions per group.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>cos_idx, sin_idx</strong> (np.ndarray, np.ndarray):\nThe indices for cos and sin projections in overall Z matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">D</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.calculate_z.calc_groupz", "modulename": "scmkl.calculate_z", "qualname": "calc_groupz", "kind": "function", "doc": "<p>Calculates the Z matrix for grouping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (np.ndarray):\nThe filtered data matrix to calculate train Z mat for.</li>\n<li><strong>X_test</strong> (np.ndarray):\nThe filtered data matrix to calculate test Z mat for.</li>\n<li><strong>adata</strong> (anndata.AnnData):\nAnnData object containing <code>seed_obj</code> in <code>.uns</code> attribute.</li>\n<li><strong>D</strong> (int):\nNumber of dimensions per grouping.</li>\n<li><strong>sigma</strong> (float):\nKernel width for grouping.</li>\n<li><strong>proj_func</strong> (function):\nThe projection direction function to be applied to data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>train_projections, test_projections</strong> (np.ndarray, np.ndarray):\nTraining and testing Z matrices for group.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">sigma</span>, </span><span class=\"param\"><span class=\"n\">proj_func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.calculate_z.calculate_z", "modulename": "scmkl.calculate_z", "qualname": "calculate_z", "kind": "function", "doc": "<p>Function to calculate Z matrices for all groups in both training \nand testing data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\ncreated by <code>scmkl.create_adata()</code> with <code>adata.uns.keys()</code>: \n<code>'train_indices'</code>, and <code>'test_indices'</code>.</li>\n<li><strong>n_features</strong> (int):\nNumber of random feature to use when calculating Z; used for \nscalability.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>,\n<code>batch_size</code> will be reduced to \n<code>int(num_training_cells / batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>adata</code> with Z matrices accessible with <code>adata.uns['Z_train']</code> \nand <code>adata.uns['Z_test']</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;Z_train&#39;, &#39;Z_test&#39;, &#39;sigmas&#39;, &#39;train_indices&#39;, </span>\n<span class=\"go\">&#39;test_indices&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata", "modulename": "scmkl.create_adata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.create_adata.calculate_d", "modulename": "scmkl.create_adata", "qualname": "calculate_d", "kind": "function", "doc": "<p>This function calculates the optimal number of dimensions for \nperformance. See <a href=\"https://doi.org/10.48550/arXiv.1806.09178\">https://doi.org/10.48550/arXiv.1806.09178</a> for more\ninformation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_samples</strong> (int):\nThe number of samples in the data set including both training\nand testing sets.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>d</strong> (int):\nThe optimal number of dimensions to run scMKL with the given \ndata set.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">raw_counts</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">load_npz</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_counts.npz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_cells</span> <span class=\"o\">=</span> <span class=\"n\">raw_counts</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_d</span><span class=\"p\">(</span><span class=\"n\">num_cells</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span>\n<span class=\"go\">161</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata.sort_samples", "modulename": "scmkl.create_adata", "qualname": "sort_samples", "kind": "function", "doc": "<p>Ensures that samples in adata obj are all training, then all \ntesting.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>train_indices</strong> (np.ndarray):\nIndices in ad.AnnData object for training.</li>\n<li><strong>test_indices</strong> (np.ndarray):\nIndices in ad.AnnData object for testing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sort_idc</strong> (np.ndarray):\nOrdered indices that will sort ad.AnnData object as all \ntraining samples, then all testing.</li>\n<li><strong>train_indices</strong> (np.ndarray):\nThe new training indices given the new index order, <code>sort_idc</code>.</li>\n<li><strong>test_indices</strong> (np.ndarray):\nThe new testing indices given the new index order, <code>sort_idc</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_indices</span>, </span><span class=\"param\"><span class=\"n\">test_indices</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata.create_adata", "modulename": "scmkl.create_adata", "qualname": "create_adata", "kind": "function", "doc": "<p>Function to create an AnnData object to carry all relevant \ninformation going forward.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (scipy.sparse.csc_matrix | np.ndarray | pd.DataFrame):\nA data matrix of cells by features (sparse array \nrecommended for large datasets).</li>\n<li><strong>feature_names</strong> (np.ndarray):\nArray of feature names corresponding with the features \nin <code>X</code>.</li>\n<li><strong>cell_labels</strong> (np.ndarray):\nA numpy array of cell phenotypes corresponding with \nthe cells in <code>X</code>.</li>\n<li><strong>group_dict</strong> (dict):\nDictionary containing feature grouping information (i.e. \n<code>{geneset1: np.array([gene_1, gene_2, ..., gene_n]), geneset2: \nnp.array([...]), ...}</code>.</li>\n<li><strong>scale_data</strong> (bool):\nIf <code>True</code>, data matrix is log transformed and standard \nscaled.</li>\n<li><strong>split_data</strong> (None | np.ndarray):\nIf <code>None</code>, data will be split stratified by cell labels. \nElse, is an array of precalculated train/test split \ncorresponding to samples. Can include labels for entire\ndataset to benchmark performance or for only training\ndata to classify unknown cell types (i.e. <code>np.array(['train', \n'test', ..., 'train'])</code>.</li>\n<li><strong>D</strong> (int):\nNumber of Random Fourier Features used to calculate Z. \nShould be a positive integer. Higher values of D will \nincrease classification accuracy at the cost of computation \ntime. If set to <code>None</code>, will be calculated given number of \nsamples.</li>\n<li><strong>remove_features</strong> (bool):\nIf <code>True</code>, will remove features from <code>X</code> and <code>feature_names</code> \nnot in <code>group_dict</code> and remove features from groupings not in \n<code>feature_names</code>.</li>\n<li><strong>train_ratio</strong> (float):\nRatio of number of training samples to entire data set. Note:\nif a threshold is applied, the ratio training samples may \ndecrease depending on class balance and <code>class_threshold</code>\nparameter if <code>allow_multiclass = True</code>.</li>\n<li><strong>distance_metric</strong> (str):\nThe pairwise distance metric used to estimate sigma. Must\nbe one of the options used in <code>scipy.spatial.distance.cdist</code>.</li>\n<li><strong>kernel_type</strong> (str):\nThe approximated kernel function used to calculate Zs.\nMust be one of <code>'Gaussian'</code>, <code>'Laplacian'</code>, or <code>'Cauchy'</code>.</li>\n<li><strong>random_state</strong> (int):\nInteger random_state used to set the seed for \nreproducibilty.</li>\n<li><strong>allow_multiclass</strong> (bool):\nIf <code>False</code>, will ensure that cell labels are binary.</li>\n<li><strong>class_threshold</strong> (str | int):\nNumber of samples allowed in the training data for each cell\nclass in the training data. If <code>'median'</code>, the median number \nof cells per cell class will be the threshold for number of \nsamples per class.</li>\n<li><strong>reduction</strong> (str | None):\nChoose which dimension reduction technique to perform on \nfeatures within a group. 'svd' will run \n<code>sklearn.decomposition.TruncatedSVD</code>, 'linear' will multiply \nby an array of 1s down to 50 dimensions.</li>\n<li><strong>tfidf</strong> (bool):\nWhether to calculate TFIDF transformation on peaks within \ngroupings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>adata</strong> (ad.AnnData):\nAnnData with the following attributes and keys:</p>\n\n<p><code>adata.X</code> (array_like):\n    Data matrix.</p>\n\n<p><code>adata.var_names</code> (array_like): \n    Feature names corresponding to <code>adata.X</code>.</p>\n\n<p><code>adata.obs['labels']</code> (array_like):\n    cell classes/phenotypes from <code>cell_labels</code>.</p>\n\n<p><code>adata.uns['train_indices']</code> (array_like):\n    Indices for training data. </p>\n\n<p><code>adata.uns['test_indices']</code> (array_like)\n    Indices for testing data.</p>\n\n<p><code>adata.uns['group_dict']</code> (dict):\n    Grouping information.</p>\n\n<p><code>adata.uns['seed_obj']</code> (np.random._generator.Generator): \n    Seed object with seed equal to 100 * <code>random_state</code>.</p>\n\n<p><code>adata.uns['D']</code> (int):\n    Number of dimensions to scMKL with.</p>\n\n<p><code>adata.uns['scale_data']</code> (bool):\n    Whether or not data is log and z-score transformed.</p>\n\n<p><code>adata.uns['distance_metric']</code> (str): \n    Distance metric as given.</p>\n\n<p><code>adata.uns['kernel_type']</code> (str): \n    Kernel function as given.</p>\n\n<p><code>adata.uns['svd']</code> (bool): \n    Whether to calculate SVD reduction.</p>\n\n<p><code>adata.uns['tfidf']</code> (bool): \n    Whether to calculate TF-IDF per grouping.</p></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_mat</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">load_npz</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_RNA_matrix.npz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_names</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_gene_names.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;hallmark_genesets.pkl&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">&gt;&gt;&gt; </span>                     <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 4341</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;group_dict&#39;, &#39;seed_obj&#39;, &#39;scale_data&#39;, &#39;D&#39;, &#39;kernel_type&#39;, </span>\n<span class=\"go\">&#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">group_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">scale_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">split_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_features</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">train_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">allow_multiclass</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">class_threshold</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;median&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reduction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing", "modulename": "scmkl.data_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.data_processing.sparse_var", "modulename": "scmkl.data_processing", "qualname": "sparse_var", "kind": "function", "doc": "<p>Function to calculate variance on a scipy sparse matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (scipy.sparse._csc.csc_matrix | np.ndarray):\nA scipy sparse or numpy array</li>\n<li><strong>axis</strong> (int | None):\nDetermines which axis variance is calculated on. Same usage \nas Numpy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>var</strong> (np.ndarray | float):\nVariance values calculated over the given axis.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.process_data", "modulename": "scmkl.data_processing", "qualname": "process_data", "kind": "function", "doc": "<p>Function to preprocess data matrix according to type of data \n(e.g. counts/rna, or binary/atac). Will process test data \naccording to parameters calculated from test data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (np.ndarray | scipy.sparse._csc.csc_matrix):\nA scipy sparse or numpy array of cells x features in the \ntraining data.</li>\n<li><strong>X_test</strong> (np.ndarray | scipy.sparse._csc.csc_matrix):\nA scipy sparse or numpy array of cells x features in the \ntesting data.</li>\n<li><strong>scale_data</strong> (bool):\nIf <code>True</code>, data will be logarithmized then z-score \ntransformed.</li>\n<li><strong>return_dense</strong> (bool):\nIf <code>True</code>, a np.ndarray will be returned as opposed to a \nscipy.sparse object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train, X_test</strong> (np.ndarray, np.ndarray):\nNumpy arrays with the process train/test data \nrespectively. If X_test is <code>None</code>, only X_train is returned.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">return_dense</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.svd_transformation", "modulename": "scmkl.data_processing", "qualname": "svd_transformation", "kind": "function", "doc": "<p>Returns matrices with SVD reduction. If <code>X_test is None</code>, only \nX_train is returned.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (np.ndarray):\nA 2D array of cells x features filtered to desired features \nfor training data.</li>\n<li><strong>X_test</strong> (np.ndarray | None):\nA 2D array of cells x features filtered to desired features \nfor testing data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train, X_test</strong> (np.ndarray, np.ndarray):\nTransformed matrices. Only X_train is returned if \n<code>X_test is None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.sample_cells", "modulename": "scmkl.data_processing", "qualname": "sample_cells", "kind": "function", "doc": "<p>Samples cells indices from training indices for calculations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>train_indices</strong> (np.ndarray):\nAn array of indices to sample from.</li>\n<li><strong>sample_size</strong> (int):\nNumber of samples to take from <code>train_indices</code>. Must be \nsmaller than length of <code>train_indices</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>indices</strong> (np.ndarray):\nThe sampled indices from <code>train_indices</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">train_indices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">seed_obj</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.pca_transformation", "modulename": "scmkl.data_processing", "qualname": "pca_transformation", "kind": "function", "doc": "<p>Returns matrices with PCA reduction. If <code>X_test is None</code>, only \nX_train is returned.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (scipy.sparse._csc.csc_matrix | np.ndarray):\nA 2D array of cells x features filtered to desired features \nfor training data.</li>\n<li><strong>X_test</strong> (scipy.sparse._csc.csc_matrix | np.ndarray | None):\nA 2D array of cells x features filtered to desired features \nfor testing data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train, X_test</strong> (np.ndarray, np.ndarray):\nTransformed matrices. Only X_train is returned if \n<code>X_test is None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.get_reduction", "modulename": "scmkl.data_processing", "qualname": "get_reduction", "kind": "function", "doc": "<p>Function used to identify reduction type and return function to \napply to data matrices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reduction</strong> (str):\nThe reduction for data transformation. Options are <code>['pca', \n'svd', 'None']</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>red_func</strong> (function):\nThe function to reduce the data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reduction</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.data_processing.get_group_mat", "modulename": "scmkl.data_processing", "qualname": "get_group_mat", "kind": "function", "doc": "<p>Filters to only features in group. Will sample features if \n<code>n_features &lt; n_group_features</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (anndata.AnnData):\nanndata object with <code>'seed_obj'</code>, <code>'train_indices'</code>, and \n<code>'test_indices'</code> in <code>.uns</code>.</li>\n<li><strong>n_features</strong> (int):\nMaximum number of features to keep in matrix. Only \nimpacts mat if <code>n_features &lt; n_group_features</code>.</li>\n<li><strong>group_features</strong> (list | tuple | np.ndarray):\nFeature names in group to filter matrices to.</li>\n<li><strong>n_group_features</strong> (int):\nNumber of features in group.</li>\n<li><strong>n_samples</strong> (int):\nNumber of samples to filter X_train to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train, X_test</strong> (np.ndarray, np.ndarray):\nFiltered matrices. If <code>n_samples</code> is provided, only <code>X_train</code> \nis returned. If <code>adata.uns['reduction']</code> is <code>'pca'</code> or \n<code>'svd'</code> the matrices are transformed before being returned.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">group_features</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">n_group_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">process_test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes", "modulename": "scmkl.dataframes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.dataframes.parse_metrics", "modulename": "scmkl.dataframes", "qualname": "parse_metrics", "kind": "function", "doc": "<p>This function returns a pd.DataFrame for a single scMKL result \nwith performance results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nA result dictionary from <code>scmkl.run()</code>.</li>\n<li><strong>key</strong> (str):\nIf specified, will add a key column to the output dataframe \nwhere each element is <code>key</code>.</li>\n<li><strong>include_as</strong> (bool):\nIf <code>True</code>, will add a column indicating which models' used \nthe optimal alphas.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA dataframe with columns <code>['Alpha', 'Metric', 'Value']</code>. \n<code>'Key'</code> col only added if <code>key</code> is not <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_as</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.get_summary", "modulename": "scmkl.dataframes", "qualname": "get_summary", "kind": "function", "doc": "<p>Takes the results from <code>scmkl.run()</code> and generates a dataframe \nfor each model containing columns for alpha, area under the ROC, \nnumber of groups with nonzero weights, and highest weighted \ngroup.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nA dictionary of results from scMKL generated from \n<code>scmkl.run()</code>.</li>\n<li><strong>metric</strong> (str):\nWhich metric to include in the summary. Default is AUROC. \nOptions include <code>'AUROC'</code>, <code>'Recall'</code>, <code>'Precision'</code>, \n<code>'Accuracy'</code>, and <code>'F1-Score'</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>summary_df</strong> (pd.DataFrame):\nA table with columns: <code>['Alpha', 'AUROC', \n'Number of Selected Groups', 'Top Group']</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">alpha_list</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">summary_df</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_summary</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">summary_df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">    Alpha   AUROC  Number of Selected Groups </span>\n<span class=\"go\">0   2.20  0.8600                          3   </span>\n<span class=\"go\">1   1.96  0.9123                          4   </span>\n<span class=\"go\">2   1.72  0.9357                          5   </span>\n<span class=\"go\">3   1.48  0.9524                          7   </span>\n<span class=\"go\">4   1.24  0.9666                          9   </span>\n<span class=\"go\">    Top Group</span>\n<span class=\"go\">0   RNA-HALLMARK_E2F_TARGETS</span>\n<span class=\"go\">1   RNA-HALLMARK_ESTROGEN_RESPONSE_EARLY</span>\n<span class=\"go\">2   RNA-HALLMARK_ESTROGEN_RESPONSE_EARLY</span>\n<span class=\"go\">3   RNA-HALLMARK_ESTROGEN_RESPONSE_EARLY</span>\n<span class=\"go\">4   RNA-HALLMARK_ESTROGEN_RESPONSE_EARLY</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUROC&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.read_files", "modulename": "scmkl.dataframes", "qualname": "read_files", "kind": "function", "doc": "<p>This function takes a directory of scMKL results as pickle files \nand returns a dictionary with the file names as keys and the data \nfrom the respective files as the values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dir</strong> (str):\nA string specifying the file path for the output scMKL runs.</li>\n<li><strong>pattern</strong> (str):\nA regex string for filtering down to desired files. If \n<code>None</code>, all files in the directory with the pickle file \nextension will be added to the dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nA dictionary with the file names as keys and data as values.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scMKL_results/rna+atac/&#39;</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_files</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_results</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;Rep_1.pkl&#39;, Rep_2.pkl, Rep_3.pkl, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.get_metrics", "modulename": "scmkl.dataframes", "qualname": "get_metrics", "kind": "function", "doc": "<p>Takes either a single scMKL result or a dictionary where each \nentry cooresponds to one result. Returns a dataframe with cols \n['Alpha', 'Metric', 'Value']. If <code>include_as == True</code>, another \ncol of booleans will be added to indicate whether or not the run \nrespective to that alpha was chosen as optimal via CV. If \n<code>include_key == True</code>, another column will be added with the name \nof the key to the respective file (only applicable with multiple \nresults).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict | None):\nA dictionary with the results of a single run from \n<code>scmkl.run()</code>. Must be <code>None</code> if <code>rfiles is not None</code>.</li>\n<li><strong>rfiles</strong> (dict | None):\nA dictionary of results dictionaries containing multiple \nresults from <code>scmkl.run()</code>.</li>\n<li><strong>include_as</strong> (bool):\nWhen <code>True</code>, will add a bool col to output pd.DataFrame \nwhere rows with alphas cooresponding to alpha_star will be \n<code>True</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA pd.DataFrame containing all of the metrics present from \nthe runs input.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For a single file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_metrics</span><span class=\"p\">(</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For multiple runs saved in a dict</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scMKL_outputs/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rfiles</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_files</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_metrics</span><span class=\"p\">(</span><span class=\"n\">rfiles</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rfiles</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_as</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.get_weights", "modulename": "scmkl.dataframes", "qualname": "get_weights", "kind": "function", "doc": "<p>Takes either a single scMKL result or dictionary of results and \nreturns a pd.DataFrame with cols ['Alpha', 'Group', \n'Kernel Weight']. If <code>include_as == True</code>, a fourth col will be \nadded to indicate whether or not the run respective to that alpha \nwas chosen as optimal via cross validation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict | None):\nA dictionary with the results of a single run from \n<code>scmkl.run()</code>. Must be <code>None</code> if <code>rfiles is not None</code>.</li>\n<li><strong>rfiles</strong> (dict | None):\nA dictionary of results dictionaries containing multiple \nresults from <code>scmkl.run()</code>.</li>\n<li><strong>include_as</strong> (bool):\nWhen <code>True</code>, will add a bool col to output pd.DataFrame \nwhere rows with alphas cooresponding to alpha_star will be \n<code>True</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA pd.DataFrame containing all of the groups from each alpha \nand their cooresponding kernel weights.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For a single file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">(</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For multiple runs saved in a dict</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scMKL_outputs/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rfiles</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_files</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">(</span><span class=\"n\">rfiles</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rfiles</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_as</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.get_selection", "modulename": "scmkl.dataframes", "qualname": "get_selection", "kind": "function", "doc": "<p>This function takes a pd.DataFrame created by \n<code>scmkl.get_weights()</code> and returns a selection table. Selection \nrefers to how many times a group had a nonzero group weight. To \ncalculate this, a col is added indicating whether the group was \nselected. Then, the dataframe is grouped by alpha and group. \nSelection can then be summed returning a dataframe with cols \n<code>['Alpha', 'Group', Selection]</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>weights_df</strong> (pd.DataFrame):\nA dataframe output by <code>scmkl.get_weights()</code> with cols\n<code>['Alpha', 'Group', 'Kernel Weight']</code>.</li>\n<li><strong>order_groups</strong> (bool):\nIf <code>True</code>, the <code>'Group'</code> col of the output dataframe will be \nmade into a <code>pd.Categorical</code> col ordered by number of times \neach group was selected in decending order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA dataframe with cols <code>['Alpha', 'Group', Selection]</code>.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For a single file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">(</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_selection</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># For multiple runs saved in a dict</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scMKL_outputs/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rfiles</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_files</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">(</span><span class=\"n\">rfiles</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_selection</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">weights_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">order_groups</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.mean_groups_per_alpha", "modulename": "scmkl.dataframes", "qualname": "mean_groups_per_alpha", "kind": "function", "doc": "<p>This function takes a pd.DataFrame from <code>scmkl.get_selection()</code> \ngenerated from multiple scMKL results and returns a dictionary \nwith keys being alphas from the input dataframe and values being \nthe mean number of selected groups for a given alpha across \nresults. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>selection_df</strong> (pd.DataFrame):\nA dataframe output by <code>scmkl.get_selection()</code> with cols \n`['Alpha', 'Group', Selection].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mean_groups</strong> (dict):\nA dictionary with alphas as keys and the mean number of \nselected groups for that alpha as keys.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">(</span><span class=\"n\">rfiles</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_selection</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_groups</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">mean_groups_per_alpha</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_groups</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">alpha</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">num_selected</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>               <span class=\"k\">for</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">num_selected</span> <span class=\"ow\">in</span> <span class=\"n\">mean_groups</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mean_groups</span><span class=\"p\">)</span>\n<span class=\"go\">{0.05 : 50.0, 0.2 : 24.7, 1.1 : 5.3}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selection_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.dataframes.read_gtf", "modulename": "scmkl.dataframes", "qualname": "read_gtf", "kind": "function", "doc": "<p>Reads and formats a gtf file. Adds colnames: <code>['chr', 'source', \n'feature', 'start', 'end', 'score', 'strand', 'frame', \n'attribute']</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nThe file path to the gtf file to be read in. If the file is \ngzipped, file name must end with .gz.</li>\n<li><strong>filter_to_coding</strong> (bool):\nIf <code>True</code>, will filter rows in gtf data frame to only \nprotein coding genes. Will add column <code>'gene_name'</code> containing \nthe gene name for each row.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nA pandas dataframe of the input gtf file.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">scmkl</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/hg38_subset_protein_coding.annotation.gtf&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_gtf</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">        chr  source     feature  start    end score strand frame                                          </span>\n<span class=\"go\">0  chr1  HAVANA        gene  11869  14409     .      +     .  </span>\n<span class=\"go\">1  chr1  HAVANA  transcript  11869  14409     .      +     .  </span>\n<span class=\"go\">2  chr1  HAVANA        exon  11869  12227     .      +     .  </span>\n<span class=\"go\">3  chr1  HAVANA        exon  12613  12721     .      +     .  </span>\n<span class=\"go\">4  chr1  HAVANA        exon  13221  14409     .      +     .  </span>\n<span class=\"go\">attribute</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; gene_type &quot;transc...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n<span class=\"go\">gene_id &quot;ENSG00000223972.5&quot;; transcript_id &quot;EN...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filter_to_coding</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma", "modulename": "scmkl.estimate_sigma", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.estimate_sigma.get_batches", "modulename": "scmkl.estimate_sigma", "qualname": "get_batches", "kind": "function", "doc": "<p>Gets batch indices for estimating sigma.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sample_range</strong> (list | np.ndarray):\nA 1D array with first element being 0 and last element being \n(1 - number of samples from X_train).</li>\n<li><strong>seed_obj</strong> (np.random._generator.Generator):\nNumpy random generator object from <code>adata.uns['seed_obj']</code>.</li>\n<li><strong>batches</strong> (int):\nNumber of batches to calculate indices for.</li>\n<li><strong>batch_size</strong> (int):\nNumber of samples in each batch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>batches_idx</strong> (np.ndarray):\nA 2D array with each row cooresponding to the sample indices \nfor each batch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_range</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">seed_obj</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma.batch_sigma", "modulename": "scmkl.estimate_sigma", "qualname": "batch_sigma", "kind": "function", "doc": "<p>Calculates the kernel width (sigma) for a feature grouping through \nsample batching.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (np.ndarray):\nA 2D numpy array with cells x features with features filtered \nto features in grouping and sampled cells.</li>\n<li><strong>distance_metric</strong> (str):\nThe pairwise distance metric used to estimate sigma. Must\nbe one of the options used in scipy.spatial.distance.cdist.</li>\n<li><strong>batch_idx</strong> (np.ndarray):\nA 2D array with each row cooresponding to the sample indices \nfor each batch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sigma</strong> (float):\nThe estimated group kernel with for Z projection before \nadjustments for small kernel width or large groupings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">batch_idx</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma.est_group_sigma", "modulename": "scmkl.estimate_sigma", "qualname": "est_group_sigma", "kind": "function", "doc": "<p>Processes data and calculates the kernel width (sigma) for a \nfeature grouping through sample batching.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (np.ndarray):\nA 2D numpy array with cells x features with features filtered \nto features in grouping and sampled cells.</li>\n<li><strong>adata</strong> (anndata.AnnData):\nadata used to derive X_train containing 'seed_obj' in uns \nattribute.</li>\n<li><strong>n_group_features</strong> (int):\nNumber of features in feature grouping.</li>\n<li><strong>n_features</strong> (int):\nMaximum number of features to be used in sigma estimation.</li>\n<li><strong>batch_idx</strong>: A 2D array with each row cooresponding to the sample indices \nfor each batch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sigma</strong> (float):\nThe estimated group kernel with for Z projection.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">n_group_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">batch_idx</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma.estimate_sigma", "modulename": "scmkl.estimate_sigma", "qualname": "estimate_sigma", "kind": "function", "doc": "<p>Calculate kernel widths to inform distribution for projection of \nFourier Features. Calculates one sigma per group of features.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nCreated by <code>create_adata</code>.</li>\n<li><strong>n_features</strong> (int):\nNumber of random features to include when estimating sigma. \nWill be scaled for the whole pathway set according to a \nheuristic. Used for scalability.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches</code> * <code>batch_size</code> &gt; # training cells,\n<code>batch_size</code> will be reduced to <code>int(num training cells / \nbatches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nKey added <code>adata.uns['sigma']</code> with grouping kernel widths.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"p\">[</span><span class=\"s1\">&#39;sigma&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">array([10.4640895 , 10.82011454,  6.16769438,  9.86156855, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings", "modulename": "scmkl.get_region_groupings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.get_region_groupings.get_tss", "modulename": "scmkl.get_region_groupings", "qualname": "get_tss", "kind": "function", "doc": "<p>Takes a row from a DataFrame as a DataFrame with columns \n['start', 'end', 'strand'] and returns the transcription start site\ndepending on gene strandedness.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong> (pd.DataFrame):\nA gtf dataframe containing only one row and columns \n<code>['start', 'end', 'strand']</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tss</strong> (int):\nThe transcription start site for row's respective annotation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.calc_range", "modulename": "scmkl.get_region_groupings", "qualname": "calc_range", "kind": "function", "doc": "<p>Returns an infered promotor region for given annotation range \ndepending on transcription start site and user-defined upstream \nand downstream adjustments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong> (pd.DataFrame):\nA gtf as a dataframe containing only one row and columns \n<code>['tss', 'strand']</code> where <code>'tss'</code> is the transcription start \nsite.</li>\n<li><strong>len_up</strong> (int):\nNumber of base pairs upstream from the transcription \nstart site the promotor range should be adjusted for.</li>\n<li><strong>len_down</strong> (int):\nNumber of base pairs downstream from the transcription start \nsite the promotor range should be adjusted for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>start_end</strong> (list):\nA 2 element list where the first element is the adjusted start\nposition and the second the the adjusted end position.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.adjust_regions", "modulename": "scmkl.get_region_groupings", "qualname": "adjust_regions", "kind": "function", "doc": "<p>Takes a GTF file as a pd.DataFrame and adjusts start and end \npositions to represent promotor regions given user-defined \nupstream and downstream adjustments relative to the transcription\nstart site.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gene_anno</strong> (pd.DataFrame):\nA dataframe with columns <code>['chr', 'start', 'end', 'strand', \n'gene_name']</code> created from a GTF file.</li>\n<li><strong>len_up</strong> (int):\nNumber of base pairs upstream of the transcription start site \nthe promotor region should be adjusted for.</li>\n<li><strong>len_down</strong> (int):\nNumber base pairs downstream of the transcription start site \nthe promotor region should be adjusted for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>gene_anno</strong> (pd.DataFrame):\nA dataframe where <code>['start', 'end']</code> columns represent the \nstart and end positions of inferred promotor regions for each \nannotation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.create_region_dicts", "modulename": "scmkl.get_region_groupings", "qualname": "create_region_dicts", "kind": "function", "doc": "<p>Takes a GTF as a pd.DataFrame and returns dictionaries required for\nregion comparisons between gene_annotations and assay features.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gene_anno</strong> (pd.DataFrame):\nA dataframe with columns <code>['chr', 'start', 'end', 'strand', \n'gene_name']</code> created from a GTF file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>peak_gene_dict</strong> (dict):\nKeys are regions and values are genes.</li>\n<li><strong>ga_regions</strong> (dict):\nChromosomes are keys and regions are values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.create_feature_dict", "modulename": "scmkl.get_region_groupings", "qualname": "create_feature_dict", "kind": "function", "doc": "<p>Takes an array of feature names and returns data formatted for\nfeature comparisons.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>feature_names</strong> (array_like):\nArray of region names from single-cell epigenetic data matrix.</li>\n</ul>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<ul>\n<li><strong>feature_dict</strong> (dict):\nKeys are chromosomes and values are regions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">set</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.compare_regions", "modulename": "scmkl.get_region_groupings", "qualname": "compare_regions", "kind": "function", "doc": "<p>Takes features from a single-cell data matrix and regions from\na gene annotation file to return an region grouping where regions \nfrom feature_dict and regions from gene annotations overlap.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>feature_dict</strong> (dict):\nKeys are chromosomes and values are regions. This data should \ncome from a single-cell experiment.</li>\n<li><strong>ga_regions</strong> (dict):\nKeys are chromosomes and values are regions. This data should \ncome from a gene annotations (gtf) file.</li>\n<li><strong>peak_gene_dict</strong> (dict):\nKeys are peaks from gene annotation file and values are the \ngene they are associated with.</li>\n<li><strong>gene_sets</strong> (dict):\nKeys are gene set names and values are an iterable object of \ngene names.</li>\n<li><strong>chr_sep</strong> (str):\nThe character that separates the chromosome from the rest of \nthe region in the original feature array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>epi_grouping</strong> (dict):\nKeys are the names from gene_sets and values are a list of \nregions from <code>feature_names</code> that overlap with promotor regions \nrespective to genes in <code>gene_sets</code> (i.e., if region in \n<code>feature_names</code> overlaps with promotor region from a gene in a \ngene set from <code>gene_sets</code>, that region will be added to the new \ndictionary under the respective gene set name).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">ga_regions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">peak_gene_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">gene_sets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">chr_sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_region_groupings.get_region_groupings", "modulename": "scmkl.get_region_groupings", "qualname": "get_region_groupings", "kind": "function", "doc": "<p>Creates a peak set where keys are gene set names from <code>gene_sets</code> \nand values are arrays of features pulled from <code>feature_names</code>. \nFeatures are added to each peak set given overlap between regions \nin single-cell data matrix and inferred gene promoter regions in \n<code>gene_anno</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gene_anno</strong> (pd.DataFrame):\nGene annotations in GTF format as a pd.DataFrame with columns\n<code>['chr', 'start', 'end', 'strand', 'gene_name']</code>.</li>\n<li><strong>gene_sets</strong> (dict):\nGene set names as keys and an iterable object of gene names\nas values.</li>\n<li><strong>feature_names</strong> (array_like | set):\nFeature names corresponding to a single_cell epigenetic data \nmatrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>epi_grouping</strong> (dict):\nKeys are the names from <code>gene_sets</code> and values\nare a list of regions from <code>feature_names</code> that overlap with \npromotor regions respective to genes in <code>gene_sets</code> (i.e., if \nregion in <code>feature_names</code> overlaps with promotor region from a \ngene in a gene set from <code>gene_sets</code>, that region will be added \nto the new dictionary under the respective gene set name).</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in a gene set and the peak names from dataset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/RNA_hallmark_groupings.pkl&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                    <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/MCF7_region_names.npy&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in GTF file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;data/hg38_subset_protein_coding.annotation.gtf&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtf</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">read_gtf</span><span class=\"p\">(</span><span class=\"n\">gtf_path</span><span class=\"p\">,</span> <span class=\"n\">filter_to_coding</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">region_grouping</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_region_groupings</span><span class=\"p\">(</span><span class=\"n\">gene_anno</span> <span class=\"o\">=</span> <span class=\"n\">gtf</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">gene_sets</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peaks</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">region_grouping</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;HALLMARK_TNFA_SIGNALING_VIA_NFKB&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">gene_sets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.multimodal_processing", "modulename": "scmkl.multimodal_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.multimodal_processing.combine_modalities", "modulename": "scmkl.multimodal_processing", "qualname": "combine_modalities", "kind": "function", "doc": "<p>Combines data sets for multimodal classification. Combined group \nnames are <code>f'{assay}+{group_name}'</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[ad.AnnData]):\nList of AnnData objects where each object is a different \nmodality. Annotations must match between objects (i.e. same \nsample order).</li>\n<li><strong>names</strong> (list[str]):\nList of strings names for each modality repective to each \nobject in adatas.</li>\n<li><strong>combination</strong> (str):\nHow to combine the matrices, either <code>'sum'</code> or <code>'concatenate'</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>combined_adata</strong> (ad.Anndata):\nAdata object with the combined Z matrices and annotations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;concatenate&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.multimodal_processing.multimodal_processing", "modulename": "scmkl.multimodal_processing", "qualname": "multimodal_processing", "kind": "function", "doc": "<p>Combines and processes a list of <code>ad.AnnData</code> objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[ad.AnnData]):\nList of <code>ad.AnnData</code> objects where each object is a different \nmodality. Annotations must match between objects (i.e. same \nsample order).</li>\n<li><strong>names</strong> (list[str]):\nList of strings names for each modality repective to each \nobject in adatas.</li>\n<li><strong>combination</strong> (str):\nHow to combine the matrices, either <code>'sum'</code> or <code>'concatenate'</code>.</li>\n<li><strong>tfidf</strong> (list[bool]):\nIf element <code>i</code> is <code>True</code>, <code>adata[i]</code> will be TF-IDF normalized.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>, <code>batch_size</code> \nwill be reduced to <code>int(num_training_cells / batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nConcatenated from objects from <code>adatas</code> with Z matrices \ncalculated.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rna_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_rna_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                               <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">rna_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_atac_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peak_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">atac_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rna_adata</span><span class=\"p\">,</span> <span class=\"n\">atac_adata</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mod_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atac&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">multimodal_processing</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"n\">adatas</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">mod_names</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 12676</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">var: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;D&#39;, &#39;kernel_type&#39;, &#39;distance_metric&#39;, &#39;train_indices&#39;,  </span>\n<span class=\"go\">&#39;test_indices&#39;, &#39;Z_train&#39;, &#39;Z_test&#39;, &#39;group_dict&#39;, &#39;seed_obj&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;concatenate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest", "modulename": "scmkl.one_v_rest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.one_v_rest.prob_table", "modulename": "scmkl.one_v_rest", "qualname": "prob_table", "kind": "function", "doc": "<p>Takes a results dictionary with class and probabilities keys and \nreturns a table of probabilities for each class and the most \nprobable class for each cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nA nested dictionary that contains a dictionary for each class \ncontaining probabilities for each cell class.</li>\n<li><strong>alpha</strong> (float):\nA float for which model probabilities should be evaluated \nfor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>prob_table</strong> (pd.DataFrame):\nEach column is a cell class and the elements are the\nclass probability outputs from the model.</li>\n<li><strong>pred_class</strong> (list[str]):\nThe most probable cell classes respective to the training set \ncells.</li>\n<li><strong>low_conf</strong> (list[bool]):\nA bool list where <code>True</code>, sample max probability is less than \n0.5.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest.per_model_summary", "modulename": "scmkl.one_v_rest", "qualname": "per_model_summary", "kind": "function", "doc": "<p>Takes the results dictionary from <code>scmkl.one_v_rest()</code> and adds a \nsummary dataframe show metrics for each model generated from the \nruns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nResults from <code>scmkl.one_v_rest()</code>.</li>\n<li><strong>uniq_labels</strong> (array_like):\nUnique cell classes from the runs.</li>\n<li><strong>alpha</strong> (float):\nThe alpha for creating the summary from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>summary_df</strong> (pd.DataFrame):\nDataframe with classes on rows and metrics as cols.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">uniq_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest.get_class_train", "modulename": "scmkl.one_v_rest", "qualname": "get_class_train", "kind": "function", "doc": "<p>This function returns a dict with each entry being a set of \ntraining indices for each cell class to be used in \n<code>scmkl.one_v_rest()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>train_indices</strong> (np.ndarray):\nThe indices in the <code>ad.AnnData</code> object of samples availible to \ntrain on.</li>\n<li><strong>cell_labels</strong> (array_like):\nThe identity of all cells in the anndata object.</li>\n<li><strong>seed_obj</strong> (np.random._generator.Generator):\nThe seed object used to randomly sample non-target samples.</li>\n<li><strong>other_factor</strong> (float):\nThe ratio of cells to sample for the other class for each \nmodel. For example, if classifying B cells with 100 B cells in \ntraining, if <code>other_factor=1</code>, 100 cells that are not B cells \nwill be trained on with the B cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>train_idx</strong> (dict):\nKeys are cell classes and values are the train indices to \ntrain scmkl that include both target and non-target samples.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">train_indices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">seed_obj</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span>,</span><span class=\"param\">\t<span class=\"n\">other_factor</span><span class=\"o\">=</span><span class=\"mf\">1.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest.one_v_rest", "modulename": "scmkl.one_v_rest", "qualname": "one_v_rest", "kind": "function", "doc": "<p>For each cell class, creates model(s) comparing that class to all \nothers. Then, predicts on the training data using <code>scmkl.run()</code>.\nOnly labels in both training and testing will be run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[AnnData]):\nList of <code>ad.AnnData</code> objects created by <code>create_adata()</code> \nwhere each <code>ad.AnnData</code> is one modality and composed of both \ntraining and testing samples. Requires that <code>'train_indices'</code>\nand <code>'test_indices'</code> are the same between all <code>ad.AnnData</code>s.</li>\n<li><strong>names</strong> (list[str]):\nString variables that describe each modality respective to \n<code>adatas</code> for labeling.</li>\n<li><strong>alpha_list</strong> (np.ndarray | float):\nAn array of alpha values to create each model with or a float \nto run with a single alpha.</li>\n<li><strong>tfidf</strong> (list[bool]):\nIf element <code>i</code> is <code>True</code>, <code>adatas[i]</code> will be TF-IDF \nnormalized.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation. \nThis will average the result of <code>batches</code> distance calculations \nof <code>batch_size</code> randomly sampled cells. More batches will \nconverge to population distance values at the cost of \nscalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability.\nIf <code>batches*batch_size &gt; num_training_cells</code>,\n<code>batch_size</code> will be reduced to \n<code>int(num_training_cells / batches)</code>.</li>\n<li><strong>force_balance</strong> (bool):\nIf <code>True</code>, training sets will be balanced to reduce class label \nimbalance. Defaults to <code>False</code>.</li>\n<li><strong>other_factor</strong> (float):\nThe ratio of cells to sample for the other class for each \nmodel. For example, if classifying B cells with 100 B cells in \ntraining, if <code>other_factor=1</code>, 100 cells that are not B cells \nwill be trained on with the B cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nContains keys for each cell class with results from cell class\nversus all other samples. See <code>scmkl.run()</code> for futher details. \nWill also include a probablilities table with the predictions \nfrom each model.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">one_v_rest</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">adata</span><span class=\"p\">],</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;B cells&#39;, &#39;Monocytes&#39;, &#39;Dendritic cells&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">force_balance</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">other_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_alpha", "modulename": "scmkl.optimize_alpha", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.optimize_alpha.multimodal_optimize_alpha", "modulename": "scmkl.optimize_alpha", "qualname": "multimodal_optimize_alpha", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding the desired sparsity. Meant to find a good \nstarting point for your model, and the alpha may need further fine \ntuning.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adatas</strong> (list[ad.AnnData]):\nObjects of type <code>ad.AnnData</code> where each object is one modality \nand Z_train and Z_test are calculated</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>tfidf_list</strong> (list | None):\nA boolean mask where <code>tfidf_list[i]</code> is respective to \n<code>adatas[i]</code>. If <code>True</code>, TF-IDF normalization will be applied to \nthe respective <code>ad.AnnData</code> during cross validation</li>\n<li><strong>alpha_array</strong> (np.ndarray):\nAll alpha values to be tested.</li>\n<li><strong>k</strong> (int):\nNumber of folds to perform cross validation over.</li>\n<li><strong>metric</strong> (str):\nWhich metric to use to optimize alpha. Options are <code>'AUROC'</code>, \n<code>'Accuracy'</code>, <code>'F1-Score'</code>, <code>'Precision'</code>, and <code>'Recall'</code>.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability. If \n<code>batches*batch_size &gt; num_training_cells</code>, <code>batch_size</code> will be \nreduced to <code>int(num_training_cells/batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_star</strong> (float):\nThe alpha value yielding the best performing model from cross \nvalidation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUROC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_alpha.optimize_alpha", "modulename": "scmkl.optimize_alpha", "qualname": "optimize_alpha", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding best performing sparsity. This function \ncurrently only works for binary experiments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData | list[ad.AnnData]):\n<code>ad.AnnData</code>(s) with <code>'Z_train'</code> and <code>'Z_test'</code> in \n<code>adata.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>tfidf</strong> (list | bool):\nIf <code>False</code>, no data will be TF-IDF transformed. If \n<code>type(adata) is list</code> and TF-IDF transformation is desired for \nall or some of the data, a bool list corresponding to <code>adata</code> \nmust be provided. To simply TF-IDF transform <code>adata</code> when \n<code>type(adata) is ad.AnnData</code>, use <code>True</code>.</li>\n<li><strong>alpha_array</strong> (np.ndarray):\nArray of all alpha values to be tested.</li>\n<li><strong>k</strong> (int):\nNumber of folds to perform cross validation over.</li>\n<li><strong>metric</strong> (str):\nWhich metric to use to optimize alpha. Options are <code>'AUROC'</code>, \n<code>'Accuracy'</code>, <code>'F1-Score'</code>, <code>'Precision'</code>, and <code>'Recall'</code>.</li>\n<li><strong>batches</strong> (int):\nThe number of batches to use for the distance calculation.\nThis will average the result of <code>batches</code> distance calculations\nof <code>batch_size</code> randomly sampled cells. More batches will converge\nto population distance values at the cost of scalability.</li>\n<li><strong>batch_size</strong> (int):\nThe number of cells to include per batch for distance\ncalculations. Higher batch size will converge to population\ndistance values at the cost of scalability. If \n<code>batches*batch_size &gt; num_training_cells</code>, <code>batch_size</code> will be \nreduced to <code>int(num_training_cells/batches)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_star</strong> (float):\nThe best performing alpha value from cross validation on \ntraining data.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_alpha</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span>\n<span class=\"go\">0.1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUROC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_sparsity", "modulename": "scmkl.optimize_sparsity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.optimize_sparsity.optimize_sparsity", "modulename": "scmkl.optimize_sparsity", "qualname": "optimize_sparsity", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding the desired sparsity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>ad.AnnData</code> with <code>'Z_train'</code> and <code>'Z_test'</code> in \n<code>adata.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>starting_alpha</strong> (float):\nThe alpha value to start the search at.</li>\n<li><strong>increment</strong> (float):\nAmount to adjust alpha by between iterations.</li>\n<li><strong>target</strong> (int):\nThe desired number of groups selected by the model.</li>\n<li><strong>n_iter</strong> (int):\nThe maximum number of iterations to run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sparsity_dict</strong> (dict):\nTested alpha as keys and the number of selected groups as \nthe values.</li>\n<li><strong>alpha</strong> (float):\nThe alpha value yielding the number of selected groups closest \nto the target.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sparcity_dict</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_sparsity</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                               <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span>\n<span class=\"go\">0.01</span>\n</code></pre>\n</div>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>celer.GroupLasso</code>:  <a href=\"https://mathurinm.github.io/celer/\">https://mathurinm.github.io/celer/</a>  </p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">starting_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.9</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.plotting", "modulename": "scmkl.plotting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.plotting.plot_conf_mat", "modulename": "scmkl.plotting", "qualname": "plot_conf_mat", "kind": "function", "doc": "<p>Creates a confusion matrix from the output of scMKL.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>results</strong> (dict):\nThe output from either scmkl.run() or scmkl.one_v_rest()\ncontaining results from scMKL.</li>\n<li><strong>title</strong> (str):\nThe text to display at the top of the matrix.</li>\n<li><strong>cmap</strong> (matplotlib.colors.LinearSegmentedColormap):\nThe gradient of the values displayed from <code>matplotlib.pyplot</code>.\nIf <code>None</code>, <code>'Purples'</code> is used see matplotlib color map \nreference for more information.</li>\n<li><strong>normalize</strong> (bool):\nIf <code>False</code>, plot the raw numbers. If <code>True</code>, plot the \nproportions.</li>\n<li><strong>alpha</strong> (None | float):\nAlpha that matrix should be created for. If <code>results</code> is from\n<code>scmkl.one_v_all()</code>, this is ignored. If <code>None</code>, smallest alpha\nwill be used.</li>\n<li><strong>save</strong> (None | str):\nFile path to save plot. If <code>None</code>, plot is not saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Running scmkl and capturing results</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">alpha_list</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">matplotlib.pyplot</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">get_cmap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">plot_conf_mat</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span> <span class=\"o\">=</span> <span class=\"n\">get_cmap</span><span class=\"p\">(</span><span class=\"s1\">&#39;Blues&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h6 id=\"citiation\">Citiation</h6>\n\n<p><a href=\"http://scikit-learn.org/stable/auto_examples/model_selection/\">http://scikit-learn.org/stable/auto_examples/model_selection/</a>\nplot_confusion_matrix.html</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.plotting.plot_metric", "modulename": "scmkl.plotting", "qualname": "plot_metric", "kind": "function", "doc": "<p>Takes a data frame of model metrics and optionally alpha star and\ncreates a scatter plot given metrics against alpha values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>summary_df</strong> (pd.DataFrame):\nDataframe created by <code>scmkl.get_summary()</code>.</li>\n<li><strong>alpha_star</strong> (None | float):\n&gt; If <code>not None</code>, a label will be added for tuned <code>alpha_star</code> \nbeing optimal model parameter for performance from cross \nvalidation on the training data. Can be calculated with \n<code>scmkl.optimize_alpha()</code>.</li>\n<li><strong>color</strong> (str):\nColor to make points on plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>metric_plot</strong> (plotnine.ggplot):\nA plot with alpha values on x-axis and metric on y-axis.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">alpha_list</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">summary_df</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_summary</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metric_plot</span> <span class=\"o\">=</span> <span class=\"n\">plot_metric</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metric_plot</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">&#39;scMKL_performance.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">summary_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_star</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.projections", "modulename": "scmkl.projections", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.projections.gaussian_trans", "modulename": "scmkl.projections", "qualname": "gaussian_trans", "kind": "function", "doc": "<p>Function to sample the projection direction vector W\nfor calculating gaussian Random Fourier Features (RFF)\nfor X.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nData matrix X to calculate an approximate kernel of.</li>\n<li><strong>sigma</strong> (float):\nParameter from data distribution controlling the approximate \nkernel width.</li>\n<li><strong>seed_obj</strong> (np.random._generator.Generator):\nNumpy random generator object from <code>adata.uns['seed_obj']</code>.</li>\n<li><strong>D</strong> (int):\nParameter determining the number of RFF used to approximate \nthe kernel function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>W</strong> (np.ndarray):\nVector defining the direction of the projection of RFF.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">seed_obj</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.projections.laplacian_trans", "modulename": "scmkl.projections", "qualname": "laplacian_trans", "kind": "function", "doc": "<p>Function to sample the projection direction vector W\nfor calculating laplacian Random Fourier Features (RFF)\nfor X.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nData matrix X to calculate an approximate kernel of.</li>\n<li><strong>sigma</strong> (float):\nParameter from data distribution controlling the approximate \nkernel width.</li>\n<li><strong>seed_obj</strong> (np.random._generator.Generator):\nNumpy random generator object from <code>adata.uns['seed_obj']</code>.</li>\n<li><strong>D</strong> (int):\nParameter determining the number of RFF used to approximate \nthe kernel function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>W</strong> (np.ndarray):\nVector defining the direction of the projection of RFF.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">seed_obj</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.projections.cauchy_trans", "modulename": "scmkl.projections", "qualname": "cauchy_trans", "kind": "function", "doc": "<p>Function to sample the projection direction vector W\nfor calculating cauchy Random Fourier Features (RFF)\nfor X.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nData matrix X to calculate an approximate \nkernel of.</li>\n<li><strong>sigma</strong> (float):\nParameter from data distribution controlling the approximate \nkernel width.</li>\n<li><strong>seed_obj</strong> (np.random._generator.Generator):\nNumpy random generator object from <code>adata.uns['seed_obj']</code>.</li>\n<li><strong>D</strong> (int):\nParameter determining the number of RFF used to approximate \nthe kernel function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>W</strong> (np.ndarray):\nVector defining the direction of the projection of RFF.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">seed_obj</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.run", "modulename": "scmkl.run", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.run.run", "modulename": "scmkl.run", "qualname": "run", "kind": "function", "doc": "<p>Wrapper function for training and test with multiple alpha values.\nReturns metrics, predictions, group weights, and resource usage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nA processed <code>ad.AnnData</code> with <code>'Z_train'</code>, <code>'Z_test'</code>, and \n<code>'group_dict'</code> keys in <code>adata.uns</code>.</li>\n<li><strong>alpha_list</strong> (np.ndarray):\nSparsity values to create models with. Alpha refers to the \npenalty parameter in Group Lasso. Larger alphas force group \nweights to shrink towards zero while smaller alphas apply a \nlesser penalty to kernal weights. Values too large will results \nin models that weight all groups as zero.</li>\n<li><strong>metrics</strong> (list[str]):\nMetrics that should be calculated on predictions. Options are \n<code>['AUROC', 'F1-Score', 'Accuracy', 'Precision', 'Recall']</code>. \nWhen set to <code>None</code>, all metrics are calculated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>results</strong> (dict):\nResults with keys and values: </p>\n\n<p><code>'Metrics'</code> (dict): \nA nested dictionary as <code>[alpha][metric] = value</code>.</p>\n\n<p><code>'Group_names'</code> (np.ndarray): \nArray of group names used in model(s).</p>\n\n<p><code>'Selected_groups'</code> (dict): \nA nested dictionary as <code>[alpha] = np.array([nonzero_groups])</code>.\nNonzero groups are groups that had a kernel weight above zero.</p>\n\n<p><code>'Norms'</code> (dict): \nA nested dictionary as <code>[alpha] = np.array([kernel_weights])</code>\nOrder of <code>kernel_weights</code> is respective to <code>'Group_names'</code> \nvalues.</p>\n\n<p><code>'Observed'</code> (np.nparray): \nAn array of ground truth cell labels from the test set.</p>\n\n<p><code>'Predictions'</code> (dict): \nA nested dictionary as <code>[alpha] = predicted_class</code> respective \nto <code>'Observations'</code> for <code>alpha</code>.</p>\n\n<p><code>'Test_indices'</code> (np.array: \nIndices of samples respective to adata used in the training \nset.</p>\n\n<p><code>'Model'</code> (dict): \nA nested dictionary where <code>[alpha] = celer.GroupLasso</code> object \nfor <code>alpha</code>.</p>\n\n<p><code>'RAM_usage'</code> (dict): \nA nested dictionary with memory usage in GB after \ntraining models for each <code>alpha</code>.</p></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">adata</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                    <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span>\n<span class=\"go\">dict_keys([&#39;Metrics&#39;, &#39;Selected_groups&#39;, &#39;Norms&#39;, &#39;Predictions&#39;, </span>\n<span class=\"go\">...        &#39;Observed&#39;, &#39;Test_indices&#39;, &#39;Group_names&#39;, &#39;Models&#39;, </span>\n<span class=\"go\">...        &#39;Train_time&#39;, &#39;RAM_usage&#39;])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span> <span class=\"n\">values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([0.05, 0.1, 0.5])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">][</span><span class=\"mf\">0.05</span><span class=\"p\">]</span>\n<span class=\"go\">{&#39;AUROC&#39;: 0.9859,</span>\n<span class=\"go\">&#39;Accuracy&#39;: 0.945,</span>\n<span class=\"go\">&#39;F1-Score&#39;: 0.9452736318407959,</span>\n<span class=\"go\">&#39;Precision&#39;: 0.9405940594059405,</span>\n<span class=\"go\">&#39;Recall&#39;: 0.95}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_probs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.test", "modulename": "scmkl.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.test.predict", "modulename": "scmkl.test", "qualname": "predict", "kind": "function", "doc": "<p>Function to return predicted labels and calculate any of AUROC, \nAccuracy, F1 Score, Precision, Recall for a classification. </p>\n\n<p><strong>If labeled_test flag in <code>adata</code> is set to <code>False</code>,\nmetrics cannot be computed.</strong></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nHas keys <code>'model'</code>, <code>'Z_train'</code>, and <code>'Z_test'</code> in <code>adata.uns</code>.</li>\n<li><strong>metrics</strong> (list[str] | None):\nWhich metrics to calculate on the predicted values. Options\nare <code>'AUROC'</code>, <code>'Accuracy'</code>, <code>'F1-Score'</code>, <code>'Precision'</code>, and \n<code>'Recall'</code>. If <code>None</code>, all five metrics are calculated.</li>\n<li><strong>return_probs</strong> (bool):\nIf <code>True</code>, will return a dictionary with class probabilities.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y_pred</strong> (np.ndarray):\nPredicted cell classes.</li>\n<li><strong>metrics_dict</strong> (dict):\nContains <code>'AUROC'</code>, <code>'Accuracy'</code>, <code>'F1-Score'</code>, \n<code>'Precision'</code>, and/or <code>'Recall'</code> keys depending on metrics \nargument.</li>\n<li><strong>probs</strong> (dict):\nIf <code>return_probs</code> is <code>True</code>, will return a dictionary with \nprobabilities for each class in <code>y_test</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>           <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">metrics</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics_dict</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;AUROC&#39;, &#39;Accuracy&#39;, &#39;F1-Score&#39;, &#39;Precision&#39;, &#39;Recall&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_probs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.test.find_selected_groups", "modulename": "scmkl.test", "qualname": "find_selected_groups", "kind": "function", "doc": "<p>Find feature groups selected by the model during training. If \nfeature weight assigned by the model is non-0, then the group \ncontaining that feature is selected.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nHas <code>celer.GroupLasso</code> object in <code>adata.uns['model']</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>selected_groups</strong> (np.ndarray):\nArray containing the names of the groups with nonzero kernel \nweights.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selected_groups</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">find_selected_groups</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selected_groups</span>\n<span class=\"go\">np.ndarray([&#39;HALLMARK_ESTROGEN_RESPONSE_EARLY&#39;, </span>\n<span class=\"go\">            &#39;HALLMARK_HYPOXIA&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize", "modulename": "scmkl.tfidf_normalize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.tfidf_normalize.tfidf", "modulename": "scmkl.tfidf_normalize", "qualname": "tfidf", "kind": "function", "doc": "<p>Function to use Term Frequency Inverse Document Frequency (TF-IDF)\nfiltering for atac data to find meaningful features.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray | scipy.sparse._csc.csc_matrix):\nData matrix of cell x feature.  Must be a <code>np.ndarray</code> or \n<code>scipy.sparse</code> matrix.</li>\n<li><strong>mode</strong> (str):\nArgument to determine what to return. Must be <code>'filter'</code> or \n<code>'normalize'</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>tfidf | significant_features</strong> (array_like):\nOutput depends on given <code>'mode'</code> parameter:</p>\n\n<p><code>'filter'</code> (np.ndarray): \nWhich column sums are nonzero (i.e. which features are \nsignificant).</p>\n\n<p><code>'normalize'</code> (np.ndarray | scipy.sparse._csc.csc_matrix): \nTF-IDF filtered data matrix of the same dimensions as <code>X</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;filter&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize.tfidf_train_test", "modulename": "scmkl.tfidf_normalize", "qualname": "tfidf_train_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize.tfidf_normalize", "modulename": "scmkl.tfidf_normalize", "qualname": "tfidf_normalize", "kind": "function", "doc": "<p>Function to TF-IDF normalize the data in an adata object. If any \nrows are entirely 0, that row and its metadata will be removed from\nthe object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>ad.Anndata</code> with <code>.X</code> to be normalized. If <code>'train_indices'</code> \nand <code>'test_indices'</code> in <code>'adata.uns.keys()'</code>, normalization \nwill be done separately for the training and testing data. \nOtherwise, it will calculate it on the entire dataset.</li>\n<li><strong>binarize</strong> (bool):\nIf <code>True</code>, all values in <code>adata.X</code> greater than 1 will become \n1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\n<code>adata</code> with <code>adata.X</code> TF-IDF normalized. Will now have the \ntrain data stacked on test data, and the indices will be \nadjusted accordingly.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">tfidf_normalize</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>, </span><span class=\"param\"><span class=\"n\">binarize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.train_model", "modulename": "scmkl.train_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.train_model.train_model", "modulename": "scmkl.train_model", "qualname": "train_model", "kind": "function", "doc": "<p>Fit a grouplasso model to the provided data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nHas <code>'Z_train'</code> and <code>'Z_test'</code> keys in <code>.uns.keys()</code>.</li>\n<li><strong>group_size</strong> (None | int):\nArgument describing how the features are grouped. If <code>None</code>, \n<code>2 * adata.uns['D']</code> will be used. For more information see \n<a href=\"https://mathurinm.github.io/celer/\ngenerated/celer.GroupLasso.html\">celer documentation</a>.</li>\n<li><strong>alpha</strong> (float):\nGroup Lasso regularization coefficient, is a floating point \nvalue controlling model solution sparsity. Must be a positive \nfloat. The smaller the value, the more feature groups will be \nselected in the trained model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>adata</strong> (ad.AnnData):\nTrained model accessible with <code>adata.uns['model']</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>           <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_d</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">d</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">group_size</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;model&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>celer</code>: \n<a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">https://mathurinm.github.io/celer/generated/celer.GroupLasso.html</a>  </p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();