window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "scmkl", "modulename": "scmkl", "kind": "module", "doc": "<h1 align=\"center\">\n<img src=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/scMKL_logo.png?raw=true\" width=\"500\"/>\n</h1><br>\n\n<p><img src=\"https://img.shields.io/pypi/v/scmkl?label=pypi%20package\" alt=\"PyPI\" />\n<img src=\"https://img.shields.io/pypi/dm/scmkl\" alt=\"PyPI - Downloads\" />\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/version.svg\" alt=\"Anaconda-Server Badge\" /></a>\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/downloads.svg\" alt=\"Anaconda-Server Badge\" /></a>\n<a href=\"https://anaconda.org/ivango17/scmkl\"><img src=\"https://anaconda.org/ivango17/scmkl/badges/latest_release_date.svg\" alt=\"Anaconda-Server Badge\" /></a></p>\n\n<p>Single-cell analysis using Multiple Kernel Learning, scMKL, is a binary classification algorithm utilizing prior information to group features to enhance classification and aid understanding of distinguishing features in multi-omic data sets.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"conda-install\">Conda install</h3>\n\n<p>Conda is the recommended method to install scMKL:</p>\n\n<pre><code>conda create -n scMKL python=3.12 ivango17::scmkl\n</code></pre>\n\n<h3 id=\"pip-install\">Pip install</h3>\n\n<p>First, create a virtual environment with <code>python&gt;=3.11.1,&lt;3.13</code>.</p>\n\n<p>Then, install scMKL with:</p>\n\n<pre><code># activate your new env with python&gt;=3.11.1 and &lt;3.13\npip install scmkl\n</code></pre>\n\n<p>If wheels do not build correctly, ensure <code>gcc</code> and <code>g++</code> are installed. They can be installed with <code>sudo apt install gcc</code> and <code>sudo apt install g++</code>.</p>\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>scMKL takes advantage of AnnData objects and can be implemented with just four pieces of data:</p>\n\n<p>1) scRNA and/or scATAC matrices (can be <code>scipy.sparse</code> matrix)</p>\n\n<p>2) An array of cell labels</p>\n\n<p>3) An array of feature names (eg. gene symbols for RNA or peaks for ATAC)</p>\n\n<p>4) A grouping dictionary where {'group_1' : [feature_5, feature_16], 'group_2' : [feature_1, feature_4, feature_9]}</p>\n\n<p>For more information on formatting/creating the grouping dictionaries, see our example for creating an <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/example/getting_RNA_groupings.ipynb\">RNA grouping</a> or <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/blob/main/example/getting_ATAC_groupings.ipynb\">ATAC grouping</a>.</p>\n\n<p>For implementing scMKL, see our examples for your use case in <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL/tree/main/example\">examples</a>.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<p>Repo: <a href=\"https://github.com/ohsu-cedar-comp-hub/scMKL\">https://github.com/ohsu-cedar-comp-hub/scMKL</a></p>\n\n<p>PyPI: <a href=\"https://pypi.org/project/scmkl/\">https://pypi.org/project/scmkl/</a></p>\n\n<p>Anaconda: <a href=\"https://anaconda.org/ivango17/scmkl\">https://anaconda.org/ivango17/scmkl</a></p>\n\n<p>API: <a href=\"https://ohsu-cedar-comp-hub.github.io/scMKL/\">https://ohsu-cedar-comp-hub.github.io/scMKL/</a></p>\n\n<h2 id=\"citation\">Citation</h2>\n\n<p>If you use scMKL in your research, please cite using:</p>\n\n<pre><code>To be determined\n</code></pre>\n\n<p>Our Shiny for Python application for viewing data produced from this work can be found here: <a href=\"https://huggingface.co/spaces/scMKL-team/scMKL_analysis\">scMKL_analysis</a></p>\n\n<hr />\n\n<h2 id=\"scmkl-documentation\"><strong>scMKL Documentation</strong></h2>\n"}, {"fullname": "scmkl.calculate_z", "modulename": "scmkl", "qualname": "calculate_z", "kind": "function", "doc": "<p>Function to calculate Z matrix.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>created by <code>create_adata()</code> with <code>adata.uns.keys()</code> <code>'sigma'</code>, \n      <code>'train_indices'</code>, and <code>'test_indices'</code>. <code>'sigma'</code> key can be \n      added by running <code>estimate_sigma()</code> on adata. </p>\n</blockquote>\n\n<p><strong>n_features</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Number of random feature to use when calculating Z- used for \n      scalability.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>adata with Z matrices accessible with <code>adata.uns['Z_train']</code> \n      and <code>adata.uns['Z_test']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;Z_train&#39;, &#39;Z_test&#39;, &#39;sigmas&#39;, &#39;train_indices&#39;, &#39;test_indices])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata", "modulename": "scmkl", "qualname": "create_adata", "kind": "function", "doc": "<p>Function to create an AnnData object to carry all relevant \ninformation going forward.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>X</strong> : <em>scipy.sparse.csc_matrix</em> | <em>np.ndarray</em> | \n        <em>pd.DataFrame</em></p>\n\n<blockquote>\n  <p>A data matrix of cells by features (sparse array \n      recommended for large datasets).</p>\n</blockquote>\n\n<p><strong>feature_names</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>array of feature names corresponding with the features \n      in X.</p>\n</blockquote>\n\n<p><strong>cell_labels</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>A numpy array of cell phenotypes corresponding with \n      the cells in X.</p>\n</blockquote>\n\n<p><strong>group_dict</strong> : <em>dict</em> </p>\n\n<blockquote>\n  <p>Dictionary containing feature grouping information.\n          - Example: {geneset: np.array(gene_1, gene_2, ..., gene_n)}</p>\n</blockquote>\n\n<p><strong>scale_data</strong> : <em>bool</em>  </p>\n\n<blockquote>\n  <p>If <code>True</code>, data matrix is log transformed and standard \n      scaled. </p>\n</blockquote>\n\n<p><strong>split_data</strong> : <em>None</em> | <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>If <em>None</em>, data will be split stratified by cell labels. \n      Else, is an array of precalculated train/test split \n      corresponding to samples.</p>\n</blockquote>\n\n<p><strong>D</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Number of Random Fourier Features used to calculate Z. \n      Should be a positive integer. Higher values of D will \n      increase classification accuracy at the cost of computation \n      time.</p>\n</blockquote>\n\n<p><strong>remove_features</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, will remove features from X and feature_names\n      not in group_dict and remove features from groupings not in\n      feature_names.</p>\n</blockquote>\n\n<p><strong>distance_metric</strong> : <em>str</em> </p>\n\n<blockquote>\n  <p>The pairwise distance metric used to estimate sigma. Must\n      be one of the options used in scipy.spatial.distance.cdist.</p>\n</blockquote>\n\n<p><strong>kernel_type</strong> : <em>str</em></p>\n\n<blockquote>\n  <p>The approximated kernel function used to calculate Zs.\n      Must be one of <code>'Gaussian'</code>, <code>'Laplacian'</code>, or <code>'Cauchy'</code>.</p>\n</blockquote>\n\n<p><strong>random_state</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>Integer random_state used to set the seed for \n      reproducibilty.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p><em>AnnData</em> with the following attributes and keys:</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.X</code> : the data matrix.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.var_names</code> : the feature names corresponding to\n  <code>adata.X</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.obs['labels']</code> : cell classes/phenotypes from \n  <code>cell_labels</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['train_indices']</code> : Indices for training data. </p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['test_indices']</code> : Indices for testing data.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['group_dict']</code> : Grouping information.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['seed_obj']</code> : Seed object with seed equal to\n  100 * <code>random_state</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>with adata.uns['D']</code> : Number of dimensions to scMKL with.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['scale_data']</code> : <em>bool</em> for wether or not data\n  is log transformed and scaled.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['distance_metric']</code> : Distance metric as given.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['kernel_type']</code> : Kernel function as given.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_mat</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">load_npz</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_RNA_matrix.npz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_names</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_gene_names.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;hallmark_genesets.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 4341</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;group_dict&#39;, &#39;seed_obj&#39;, &#39;scale_data&#39;, &#39;D&#39;, &#39;kernel_type&#39;, </span>\n<span class=\"go\">&#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">group_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">scale_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">split_data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">remove_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma", "modulename": "scmkl", "qualname": "estimate_sigma", "kind": "function", "doc": "<p>Calculate kernel widths to inform distribution for projection of \nFourier Features. Calculates one sigma per group of features.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Created by <code>create_adata</code>.</p>\n</blockquote>\n\n<p><strong>n_features</strong> : <em>int</em>  </p>\n\n<blockquote>\n  <p>Number of random features to include when estimating sigma. \n      Will be scaled for the whole pathway set according to a \n      heuristic. Used for scalability.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>Key added <code>adata.uns['sigma']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"p\">[</span><span class=\"s1\">&#39;sigma&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">array([10.4640895 , 10.82011454,  6.16769438,  9.86156855, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_atac_groupings", "modulename": "scmkl", "qualname": "get_atac_groupings", "kind": "function", "doc": "<p>Creates a peak set where keys are gene set names from <code>gene_sets</code> and \nvalues are arrays of features pulled from <code>feature_names</code>. Features\nare added to each peak set given overlap between regions in \nsingle-cell data matrix and inferred gene promoter regions in \n<code>gene_anno</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>gene_anno</strong> : <em>pd.DataFrame</em></p>\n\n<blockquote>\n  <p>Gene annotations in GTF format as a pd.DataFrame with columns\n      ['chr', 'start', 'end', 'strand', 'gene_name'].</p>\n</blockquote>\n\n<p><strong>gene_sets</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Gene set names as keys and an iterable object of gene names\n      as values.</p>\n</blockquote>\n\n<p><strong>feature_names</strong> : <em>np.ndarray</em> | <em>pd.Series</em> | <em>list</em> | <em>set</em></p>\n\n<blockquote>\n  <p>Feature names corresponding to a single_cell ATAC data \n      matrix.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>atac_grouping</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Keys are the names from <code>gene_sets</code> and values\n      are a list of regions from <code>feature_names</code> that overlap with \n      promotor regions respective to genes in <code>gene_sets</code> (i.e., if \n      ATAC feature in <code>feature_names</code> overlaps with promotor region \n      from a gene in a gene set from <code>gene_sets</code>, that region will be\n      added to the new dictionary under the respective gene set \n      name).</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in a gene set and the peak names from scATAC dataset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/RNA_hallmark_groupings.pkl&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assay_peaks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/MCF7_ATAC_feature_names.npy&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in GTF file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/hg38_subset_protein_coding.annotation.gtf&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip_blank_lines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;#&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Naming columns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;chr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;source&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;feature&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                            <span class=\"s1\">&#39;strand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frame&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Subsetting to only protein coding genes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>                                                                    <span class=\"s1\">&#39;protein_coding&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;feature&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;gene&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Capturing gene name from attributes column</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;gene_name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;(?&lt;=gene_name &quot;)[A-z0-9]+&#39;</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n<span class=\"gp\">... </span>                                 <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_grouping</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_atac_groupings</span><span class=\"p\">(</span><span class=\"n\">gene_anno</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">gene_sets</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">assay_peaks</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_grouping</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;HALLMARK_TNFA_SIGNALING_VIA_NFKB&#39;, &#39;HALLMARK_HYPOXIA&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">gene_sets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.multimodal_processing", "modulename": "scmkl", "qualname": "multimodal_processing", "kind": "function", "doc": "<p>Combines and processes a list of adata objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adatas</strong> : <em>list[AnnData]</em> </p>\n\n<blockquote>\n  <p>List of AnnData objects where each object is a different \n      modality for the same cells.</p>\n</blockquote>\n\n<p><strong>names</strong> : <em>list[str]</em></p>\n\n<blockquote>\n  <p>List of string names for each modality repective to each \n      object in <code>adatas</code>.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>List where if element i is <code>True</code>, adata[i] will be TFIDF \n      normalized.</p>\n</blockquote>\n\n<p><strong>z_calculation</strong> : <em>bool</em></p>\n\n<blockquote>\n  <p>If <code>True</code>, will calculate Z matrices for training and testing \n      in each object in <code>adata</code>.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Concatenated from objects from <code>adatas</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rna_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_rna_mat</span><span class=\"p\">,</span> <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">rna_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_atac_mat</span><span class=\"p\">,</span> <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peak_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">atac_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">multimodal_processing</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rna_adata</span><span class=\"p\">,</span> <span class=\"n\">atac_adata</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atac&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span> <span class=\"n\">z_calculation</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 12676</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">var: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;D&#39;, &#39;kernel_type&#39;, &#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;, &#39;Z_train&#39;, </span>\n<span class=\"go\">&#39;Z_test&#39;, &#39;group_dict&#39;, &#39;seed_obj&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">z_calculation</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest", "modulename": "scmkl", "qualname": "one_v_rest", "kind": "function", "doc": "<p>For each cell class, creates model(s) comparing that class to all \nothers. Then, predicts on the training data using <code>scmkl.run()</code>.\nOnly labels in both training and testing will be run.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adatas</strong> : <em>list[AnnData]</em> </p>\n\n<blockquote>\n  <p>List of AnnData objects created by create_adata()\n      where each AnnData is one modality and composed of both \n      training and testing samples. Requires that <code>'train_indices'</code>\n      and <code>'test_indices'</code> are the same across all AnnDatas.</p>\n</blockquote>\n\n<p><strong>names</strong> : <em>list[str]</em> </p>\n\n<blockquote>\n  <p>List of string variables that describe each modality\n      respective to adatas for labeling.</p>\n</blockquote>\n\n<p><strong>alpha_list</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>An array of alpha values to create each model with.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>list[bool]</em> </p>\n\n<blockquote>\n  <p>List where if element i is <code>True</code>, adata[i] will be TFIDF \n      normalized.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>results</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Contains keys for each cell class with results from cell class\n  versus all other samples. See <code>scmkl.run()</code> for futher details.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">one_v_rest</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">adata</span><span class=\"p\">],</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;B cells&#39;, &#39;Monocytes&#39;, &#39;Dendritic cells&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_alpha", "modulename": "scmkl", "qualname": "optimize_alpha", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding best performing sparsity.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> | <em>list[AnnData]</em></p>\n\n<blockquote>\n  <p><code>AnnData</code>(s) with <code>'Z_train'</code> and <code>'Z_test'</code> in \n      <code>adata.uns.keys()</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. \n      For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, TFIDF normalization will be run at each fold.</p>\n</blockquote>\n\n<p><strong>alpha_array</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>Array of all alpha values to be tested.</p>\n</blockquote>\n\n<p><strong>k</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>Number of folds to perform cross validation over.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>alpha_star</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The best performing alpha value from cross validation on \n      training data.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_alpha</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">group_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">D</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span>\n<span class=\"go\">0.1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_array</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_sparsity", "modulename": "scmkl", "qualname": "optimize_sparsity", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding the desired sparsity.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p><code>AnnData</code> with <code>'Z_train'</code> and <code>'Z_test'</code> in \n      <code>adata.uns.keys()</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>starting_alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>The alpha value to start the search at.</p>\n</blockquote>\n\n<p><strong>increment</strong> : <em>float</em> </p>\n\n<blockquote>\n  <p>Amount to adjust alpha by between iterations.</p>\n</blockquote>\n\n<p><strong>target</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The desired number of groups selected by the model.</p>\n</blockquote>\n\n<p><strong>n_iter</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The maximum number of iterations to run.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>sparsity_dict</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Tested alpha as keys and the number of selected pathways as \n      the values.</p>\n</blockquote>\n\n<p><strong>alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>The alpha value yielding the number of selected groups closest \n      to the target.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sparcity_dict</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_sparsity</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">D</span><span class=\"p\">),</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span>\n<span class=\"go\">0.01</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span>,</span><span class=\"param\">\t<span class=\"n\">starting_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.9</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.run", "modulename": "scmkl", "qualname": "run", "kind": "function", "doc": "<p>Wrapper function for training and test with multiple alpha values.\nReturns metrics, predictions, group weights, and resource usage.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>A processed <em>AnnData</em> with <code>'Z_train'</code>, <code>'Z_test'</code>, and \n      <code>'group_dict'</code> keys in <code>adata.uns</code>.</p>\n</blockquote>\n\n<p><strong>alpha_list</strong> : <em>np.ndarray</em> </p>\n\n<blockquote>\n  <p><code>alpha</code> values to create models using. Alpha refers to the \n      penalty parameter in Group Lasso. Larger alphas force group \n      weights to shrink towards 0 while smaller alphas apply a lesser \n      penalty to kernal weights.</p>\n</blockquote>\n\n<p><strong>metrics</strong> : <em>list[str]</em></p>\n\n<blockquote>\n  <p>What metrics should be calculated on predictions. Options are \n      ['AUROC', 'F1-Score', 'Accuracy', 'Precision', 'Recall']. When \n      set to <code>None</code>, all metrics are calculated.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>results</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>With keys and values: </p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Metrics'</code> : a nested dictionary as <code>[alpha][metric]</code> = value.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Selected_groups'</code> : a dictionary as <code>[alpha]</code> = array of \n      groups with nonzero weights.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Norms'</code> : a dictionary as <code>[alpha]</code> = array of kernel weights\n      for each group, order respective to 'Group_names'.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Predictions'</code> : a dictionary as <code>[alpha]</code> = predicted class\n      respective to 'Observations' for that <code>alpha</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Observed'</code> : an array of ground truth cell labels from the\n      test set.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Test_indices'</code> : indices of samples respective to adata \n      used in the training set.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Group_names'</code> : an array of group names respective to each\n      array in 'Norms'.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Model'</code> : a dictionary where <code>[alpha]</code> = Celer Group Lasso\n      object for that <code>alpha</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'RAM_usage'</code> : memory usage after training models for each \n      <code>alpha</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span>\n<span class=\"go\">dict_keys([&#39;Metrics&#39;, &#39;Selected_groups&#39;, &#39;Norms&#39;, &#39;Predictions&#39;, &#39;Observed&#39;, </span>\n<span class=\"go\">&#39;Test_indices&#39;, &#39;Group_names&#39;, &#39;Models&#39;, &#39;Train_time&#39;, &#39;RAM_usage&#39;])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># List of alpha values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([0.05, 0.1, 0.5])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">][</span><span class=\"mf\">0.05</span><span class=\"p\">]</span>\n<span class=\"go\">{&#39;AUROC&#39;: 0.9859,</span>\n<span class=\"go\">&#39;Accuracy&#39;: 0.945,</span>\n<span class=\"go\">&#39;F1-Score&#39;: 0.9452736318407959,</span>\n<span class=\"go\">&#39;Precision&#39;: 0.9405940594059405,</span>\n<span class=\"go\">&#39;Recall&#39;: 0.95}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize", "modulename": "scmkl", "qualname": "tfidf_normalize", "kind": "function", "doc": "<p>Function to TFIDF normalize the data in an adata object. If any \nrows are entirely 0, that row and its metadata will be removed from\nthe object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p><code>adata.X</code> to be normalized. If <code>'train_indices'</code> and \n      <code>'test_indices'</code> in <code>'adata.uns.keys()'</code>, normalization will be\n      done separately for the training and testing data. Otherwise, \n      it will calculate it on the entire dataset.</p>\n</blockquote>\n\n<p><strong>binarize</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, all values in <code>adata.X</code> greater than 1 will become \n      1.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>adata with adata.X TFIDF normalized. Will now have the train \n      data stacked on test data, and the indices will be adjusted \n      accordingly.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">tfidf_normalize</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">binarize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.train_model", "modulename": "scmkl", "qualname": "train_model", "kind": "function", "doc": "<p>Fit a grouplasso model to the provided data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Has <code>'Z_train'</code> and <code>'Z_test'</code> keys in <code>adata.uns</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>Group Lasso regularization coefficient. alpha is a floating \n      point value controlling model solution sparsity. Must be a \n      positive float. The smaller the value, the more feature groups \n      will be selected in the trained model.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Trained model accessible with <code>adata.uns['model']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;model&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.calculate_z", "modulename": "scmkl.calculate_z", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.calculate_z.calculate_z", "modulename": "scmkl.calculate_z", "qualname": "calculate_z", "kind": "function", "doc": "<p>Function to calculate Z matrix.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>created by <code>create_adata()</code> with <code>adata.uns.keys()</code> <code>'sigma'</code>, \n      <code>'train_indices'</code>, and <code>'test_indices'</code>. <code>'sigma'</code> key can be \n      added by running <code>estimate_sigma()</code> on adata. </p>\n</blockquote>\n\n<p><strong>n_features</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Number of random feature to use when calculating Z- used for \n      scalability.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>adata with Z matrices accessible with <code>adata.uns['Z_train']</code> \n      and <code>adata.uns['Z_test']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;Z_train&#39;, &#39;Z_test&#39;, &#39;sigmas&#39;, &#39;train_indices&#39;, &#39;test_indices])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.create_adata", "modulename": "scmkl.create_adata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.create_adata.create_adata", "modulename": "scmkl.create_adata", "qualname": "create_adata", "kind": "function", "doc": "<p>Function to create an AnnData object to carry all relevant \ninformation going forward.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>X</strong> : <em>scipy.sparse.csc_matrix</em> | <em>np.ndarray</em> | \n        <em>pd.DataFrame</em></p>\n\n<blockquote>\n  <p>A data matrix of cells by features (sparse array \n      recommended for large datasets).</p>\n</blockquote>\n\n<p><strong>feature_names</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>array of feature names corresponding with the features \n      in X.</p>\n</blockquote>\n\n<p><strong>cell_labels</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>A numpy array of cell phenotypes corresponding with \n      the cells in X.</p>\n</blockquote>\n\n<p><strong>group_dict</strong> : <em>dict</em> </p>\n\n<blockquote>\n  <p>Dictionary containing feature grouping information.\n          - Example: {geneset: np.array(gene_1, gene_2, ..., gene_n)}</p>\n</blockquote>\n\n<p><strong>scale_data</strong> : <em>bool</em>  </p>\n\n<blockquote>\n  <p>If <code>True</code>, data matrix is log transformed and standard \n      scaled. </p>\n</blockquote>\n\n<p><strong>split_data</strong> : <em>None</em> | <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>If <em>None</em>, data will be split stratified by cell labels. \n      Else, is an array of precalculated train/test split \n      corresponding to samples.</p>\n</blockquote>\n\n<p><strong>D</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Number of Random Fourier Features used to calculate Z. \n      Should be a positive integer. Higher values of D will \n      increase classification accuracy at the cost of computation \n      time.</p>\n</blockquote>\n\n<p><strong>remove_features</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, will remove features from X and feature_names\n      not in group_dict and remove features from groupings not in\n      feature_names.</p>\n</blockquote>\n\n<p><strong>distance_metric</strong> : <em>str</em> </p>\n\n<blockquote>\n  <p>The pairwise distance metric used to estimate sigma. Must\n      be one of the options used in scipy.spatial.distance.cdist.</p>\n</blockquote>\n\n<p><strong>kernel_type</strong> : <em>str</em></p>\n\n<blockquote>\n  <p>The approximated kernel function used to calculate Zs.\n      Must be one of <code>'Gaussian'</code>, <code>'Laplacian'</code>, or <code>'Cauchy'</code>.</p>\n</blockquote>\n\n<p><strong>random_state</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>Integer random_state used to set the seed for \n      reproducibilty.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p><em>AnnData</em> with the following attributes and keys:</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.X</code> : the data matrix.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.var_names</code> : the feature names corresponding to\n  <code>adata.X</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.obs['labels']</code> : cell classes/phenotypes from \n  <code>cell_labels</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['train_indices']</code> : Indices for training data. </p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['test_indices']</code> : Indices for testing data.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['group_dict']</code> : Grouping information.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['seed_obj']</code> : Seed object with seed equal to\n  100 * <code>random_state</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>with adata.uns['D']</code> : Number of dimensions to scMKL with.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['scale_data']</code> : <em>bool</em> for wether or not data\n  is log transformed and scaled.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['distance_metric']</code> : Distance metric as given.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>adata.uns['kernel_type']</code> : Kernel function as given.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_mat</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">load_npz</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_RNA_matrix.npz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_names</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCF7_gene_names.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;hallmark_genesets.pkl&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 4341</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;group_dict&#39;, &#39;seed_obj&#39;, &#39;scale_data&#39;, &#39;D&#39;, &#39;kernel_type&#39;, </span>\n<span class=\"go\">&#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">cell_labels</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">group_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">scale_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">split_data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">remove_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.estimate_sigma", "modulename": "scmkl.estimate_sigma", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.estimate_sigma.estimate_sigma", "modulename": "scmkl.estimate_sigma", "qualname": "estimate_sigma", "kind": "function", "doc": "<p>Calculate kernel widths to inform distribution for projection of \nFourier Features. Calculates one sigma per group of features.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Created by <code>create_adata</code>.</p>\n</blockquote>\n\n<p><strong>n_features</strong> : <em>int</em>  </p>\n\n<blockquote>\n  <p>Number of random features to include when estimating sigma. \n      Will be scaled for the whole pathway set according to a \n      heuristic. Used for scalability.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>Key added <code>adata.uns['sigma']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"p\">[</span><span class=\"s1\">&#39;sigma&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">array([10.4640895 , 10.82011454,  6.16769438,  9.86156855, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">n_features</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.get_atac_groupings", "modulename": "scmkl.get_atac_groupings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.get_atac_groupings.get_atac_groupings", "modulename": "scmkl.get_atac_groupings", "qualname": "get_atac_groupings", "kind": "function", "doc": "<p>Creates a peak set where keys are gene set names from <code>gene_sets</code> and \nvalues are arrays of features pulled from <code>feature_names</code>. Features\nare added to each peak set given overlap between regions in \nsingle-cell data matrix and inferred gene promoter regions in \n<code>gene_anno</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>gene_anno</strong> : <em>pd.DataFrame</em></p>\n\n<blockquote>\n  <p>Gene annotations in GTF format as a pd.DataFrame with columns\n      ['chr', 'start', 'end', 'strand', 'gene_name'].</p>\n</blockquote>\n\n<p><strong>gene_sets</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Gene set names as keys and an iterable object of gene names\n      as values.</p>\n</blockquote>\n\n<p><strong>feature_names</strong> : <em>np.ndarray</em> | <em>pd.Series</em> | <em>list</em> | <em>set</em></p>\n\n<blockquote>\n  <p>Feature names corresponding to a single_cell ATAC data \n      matrix.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>atac_grouping</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Keys are the names from <code>gene_sets</code> and values\n      are a list of regions from <code>feature_names</code> that overlap with \n      promotor regions respective to genes in <code>gene_sets</code> (i.e., if \n      ATAC feature in <code>feature_names</code> overlaps with promotor region \n      from a gene in a gene set from <code>gene_sets</code>, that region will be\n      added to the new dictionary under the respective gene set \n      name).</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in a gene set and the peak names from scATAC dataset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/RNA_hallmark_groupings.pkl&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assay_peaks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/MCF7_ATAC_feature_names.npy&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_pickle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Reading in GTF file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/hg38_subset_protein_coding.annotation.gtf&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip_blank_lines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;#&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Naming columns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;chr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;source&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;feature&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                            <span class=\"s1\">&#39;strand&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frame&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Subsetting to only protein coding genes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>                                                                    <span class=\"s1\">&#39;protein_coding&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;feature&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;gene&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Capturing gene name from attributes column</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;gene_name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;(?&lt;=gene_name &quot;)[A-z0-9]+&#39;</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n<span class=\"gp\">... </span>                                 <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">gene_annotations</span><span class=\"p\">[</span><span class=\"s1\">&#39;attribute&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_grouping</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">get_atac_groupings</span><span class=\"p\">(</span><span class=\"n\">gene_anno</span> <span class=\"o\">=</span> <span class=\"n\">gene_annotations</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">gene_sets</span> <span class=\"o\">=</span> <span class=\"n\">gene_sets</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                        <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">assay_peaks</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_grouping</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;HALLMARK_TNFA_SIGNALING_VIA_NFKB&#39;, &#39;HALLMARK_HYPOXIA&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gene_anno</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">gene_sets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">len_up</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">len_down</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.multimodal_processing", "modulename": "scmkl.multimodal_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.multimodal_processing.multimodal_processing", "modulename": "scmkl.multimodal_processing", "qualname": "multimodal_processing", "kind": "function", "doc": "<p>Combines and processes a list of adata objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adatas</strong> : <em>list[AnnData]</em> </p>\n\n<blockquote>\n  <p>List of AnnData objects where each object is a different \n      modality for the same cells.</p>\n</blockquote>\n\n<p><strong>names</strong> : <em>list[str]</em></p>\n\n<blockquote>\n  <p>List of string names for each modality repective to each \n      object in <code>adatas</code>.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>List where if element i is <code>True</code>, adata[i] will be TFIDF \n      normalized.</p>\n</blockquote>\n\n<p><strong>z_calculation</strong> : <em>bool</em></p>\n\n<blockquote>\n  <p>If <code>True</code>, will calculate Z matrices for training and testing \n      in each object in <code>adata</code>.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Concatenated from objects from <code>adatas</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rna_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_rna_mat</span><span class=\"p\">,</span> <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">rna_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atac_adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">mcf7_atac_mat</span><span class=\"p\">,</span> <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">peak_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">scale_data</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cell_labels</span> <span class=\"o\">=</span> <span class=\"n\">cell_labels</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">atac_grouping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">multimodal_processing</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rna_adata</span><span class=\"p\">,</span> <span class=\"n\">atac_adata</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atac&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span> <span class=\"n\">z_calculation</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span>\n<span class=\"go\">AnnData object with n_obs \u00d7 n_vars = 1000 \u00d7 12676</span>\n<span class=\"go\">obs: &#39;labels&#39;</span>\n<span class=\"go\">var: &#39;labels&#39;</span>\n<span class=\"go\">uns: &#39;D&#39;, &#39;kernel_type&#39;, &#39;distance_metric&#39;, &#39;train_indices&#39;, &#39;test_indices&#39;, &#39;Z_train&#39;, </span>\n<span class=\"go\">&#39;Z_test&#39;, &#39;group_dict&#39;, &#39;seed_obj&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">z_calculation</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.one_v_rest", "modulename": "scmkl.one_v_rest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.one_v_rest.one_v_rest", "modulename": "scmkl.one_v_rest", "qualname": "one_v_rest", "kind": "function", "doc": "<p>For each cell class, creates model(s) comparing that class to all \nothers. Then, predicts on the training data using <code>scmkl.run()</code>.\nOnly labels in both training and testing will be run.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adatas</strong> : <em>list[AnnData]</em> </p>\n\n<blockquote>\n  <p>List of AnnData objects created by create_adata()\n      where each AnnData is one modality and composed of both \n      training and testing samples. Requires that <code>'train_indices'</code>\n      and <code>'test_indices'</code> are the same across all AnnDatas.</p>\n</blockquote>\n\n<p><strong>names</strong> : <em>list[str]</em> </p>\n\n<blockquote>\n  <p>List of string variables that describe each modality\n      respective to adatas for labeling.</p>\n</blockquote>\n\n<p><strong>alpha_list</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>An array of alpha values to create each model with.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>list[bool]</em> </p>\n\n<blockquote>\n  <p>List where if element i is <code>True</code>, adata[i] will be TFIDF \n      normalized.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>results</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Contains keys for each cell class with results from cell class\n  versus all other samples. See <code>scmkl.run()</code> for futher details.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">one_v_rest</span><span class=\"p\">(</span><span class=\"n\">adatas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">adata</span><span class=\"p\">],</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rna&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]),</span>\n<span class=\"gp\">... </span>                          <span class=\"n\">tfidf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;B cells&#39;, &#39;Monocytes&#39;, &#39;Dendritic cells&#39;, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adatas</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_alpha", "modulename": "scmkl.optimize_alpha", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.optimize_alpha.optimize_alpha", "modulename": "scmkl.optimize_alpha", "qualname": "optimize_alpha", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding best performing sparsity.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> | <em>list[AnnData]</em></p>\n\n<blockquote>\n  <p><code>AnnData</code>(s) with <code>'Z_train'</code> and <code>'Z_test'</code> in \n      <code>adata.uns.keys()</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. \n      For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>tfidf</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, TFIDF normalization will be run at each fold.</p>\n</blockquote>\n\n<p><strong>alpha_array</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>Array of all alpha values to be tested.</p>\n</blockquote>\n\n<p><strong>k</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>Number of folds to perform cross validation over.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>alpha_star</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The best performing alpha value from cross validation on \n      training data.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_alpha</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">group_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">D</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha_star</span>\n<span class=\"go\">0.1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span>,</span><span class=\"param\">\t<span class=\"n\">tfidf</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_array</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.optimize_sparsity", "modulename": "scmkl.optimize_sparsity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.optimize_sparsity.optimize_sparsity", "modulename": "scmkl.optimize_sparsity", "qualname": "optimize_sparsity", "kind": "function", "doc": "<p>Iteratively train a grouplasso model and update alpha to find the \nparameter yielding the desired sparsity.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p><code>AnnData</code> with <code>'Z_train'</code> and <code>'Z_test'</code> in \n      <code>adata.uns.keys()</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>starting_alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>The alpha value to start the search at.</p>\n</blockquote>\n\n<p><strong>increment</strong> : <em>float</em> </p>\n\n<blockquote>\n  <p>Amount to adjust alpha by between iterations.</p>\n</blockquote>\n\n<p><strong>target</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The desired number of groups selected by the model.</p>\n</blockquote>\n\n<p><strong>n_iter</strong> : <em>int</em></p>\n\n<blockquote>\n  <p>The maximum number of iterations to run.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>sparsity_dict</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Tested alpha as keys and the number of selected pathways as \n      the values.</p>\n</blockquote>\n\n<p><strong>alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>The alpha value yielding the number of selected groups closest \n      to the target.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sparcity_dict</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">optimize_sparsity</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">D</span><span class=\"p\">),</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alpha</span>\n<span class=\"go\">0.01</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span>,</span><span class=\"param\">\t<span class=\"n\">starting_alpha</span><span class=\"o\">=</span><span class=\"mf\">1.9</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.run", "modulename": "scmkl.run", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.run.run", "modulename": "scmkl.run", "qualname": "run", "kind": "function", "doc": "<p>Wrapper function for training and test with multiple alpha values.\nReturns metrics, predictions, group weights, and resource usage.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>A processed <em>AnnData</em> with <code>'Z_train'</code>, <code>'Z_test'</code>, and \n      <code>'group_dict'</code> keys in <code>adata.uns</code>.</p>\n</blockquote>\n\n<p><strong>alpha_list</strong> : <em>np.ndarray</em> </p>\n\n<blockquote>\n  <p><code>alpha</code> values to create models using. Alpha refers to the \n      penalty parameter in Group Lasso. Larger alphas force group \n      weights to shrink towards 0 while smaller alphas apply a lesser \n      penalty to kernal weights.</p>\n</blockquote>\n\n<p><strong>metrics</strong> : <em>list[str]</em></p>\n\n<blockquote>\n  <p>What metrics should be calculated on predictions. Options are \n      ['AUROC', 'F1-Score', 'Accuracy', 'Precision', 'Recall']. When \n      set to <code>None</code>, all metrics are calculated.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>results</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>With keys and values: </p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Metrics'</code> : a nested dictionary as <code>[alpha][metric]</code> = value.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Selected_groups'</code> : a dictionary as <code>[alpha]</code> = array of \n      groups with nonzero weights.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Norms'</code> : a dictionary as <code>[alpha]</code> = array of kernel weights\n      for each group, order respective to 'Group_names'.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Predictions'</code> : a dictionary as <code>[alpha]</code> = predicted class\n      respective to 'Observations' for that <code>alpha</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Observed'</code> : an array of ground truth cell labels from the\n      test set.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Test_indices'</code> : indices of samples respective to adata \n      used in the training set.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Group_names'</code> : an array of group names respective to each\n      array in 'Norms'.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'Model'</code> : a dictionary where <code>[alpha]</code> = Celer Group Lasso\n      object for that <code>alpha</code>.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>'RAM_usage'</code> : memory usage after training models for each \n      <code>alpha</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">alpha_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span>\n<span class=\"go\">dict_keys([&#39;Metrics&#39;, &#39;Selected_groups&#39;, &#39;Norms&#39;, &#39;Predictions&#39;, &#39;Observed&#39;, </span>\n<span class=\"go\">&#39;Test_indices&#39;, &#39;Group_names&#39;, &#39;Models&#39;, &#39;Train_time&#39;, &#39;RAM_usage&#39;])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># List of alpha values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([0.05, 0.1, 0.5])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Metrics&#39;</span><span class=\"p\">][</span><span class=\"mf\">0.05</span><span class=\"p\">]</span>\n<span class=\"go\">{&#39;AUROC&#39;: 0.9859,</span>\n<span class=\"go\">&#39;Accuracy&#39;: 0.945,</span>\n<span class=\"go\">&#39;F1-Score&#39;: 0.9452736318407959,</span>\n<span class=\"go\">&#39;Precision&#39;: 0.9405940594059405,</span>\n<span class=\"go\">&#39;Recall&#39;: 0.95}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adata</span><span class=\"p\">:</span> <span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">anndata</span><span class=\"o\">.</span><span class=\"n\">AnnData</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_list</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.test", "modulename": "scmkl.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.test.predict", "modulename": "scmkl.test", "qualname": "predict", "kind": "function", "doc": "<p>Function to return predicted labels and calculate any of AUROC, \nAccuracy, F1 Score, Precision, Recall for a classification. </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>Has keys <code>'model'</code>, <code>'Z_train'</code>, and <code>'Z_test'</code> in \n      <code>adata.uns</code>.</p>\n</blockquote>\n\n<p><strong>metrics</strong> : <em>list[str]</em></p>\n\n<blockquote>\n  <p>Which metrics to calculate on the predicted values. Options\n      are <code>'AUROC'</code>, <code>'Accuracy'</code>, <code>'F1-Score'</code>, <code>'Precision'</code>, and \n      <code>'Recall'</code>.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>metrics_dict</strong> : <em>dict</em></p>\n\n<blockquote>\n  <p>Contains <code>'AUROC'</code>, <code>'Accuracy'</code>, <code>'F1-Score'</code>, \n      <code>'Precision'</code>, and/or <code>'Recall'</code> keys depending on metrics \n      argument.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics_dict</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metrics_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">dict_keys([&#39;AUROC&#39;, &#39;Accuracy&#39;, &#39;F1-Score&#39;, &#39;Precision&#39;, &#39;Recall&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.test.find_selected_groups", "modulename": "scmkl.test", "qualname": "find_selected_groups", "kind": "function", "doc": "<p>Find feature groups selected by the model during training. If \nfeature weight assigned by the model is non-0, then the group \ncontaining that feature is selected.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em></p>\n\n<blockquote>\n  <p>Has <em>celer.GroupLasso</em> object in <code>adata.uns['model']</code>.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>selected_groups</strong> : <em>np.ndarray</em></p>\n\n<blockquote>\n  <p>Array containing the names of the groups with nonzero kernel \n      weights.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selected_groups</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">find_selected_groups</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">selected_groups</span>\n<span class=\"go\">np.ndarray([&#39;HALLMARK_ESTROGEN_RESPONSE_EARLY&#39;, &#39;HALLMARK_HYPOXIA&#39;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "scmkl.tfidf_normalize", "modulename": "scmkl.tfidf_normalize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.tfidf_normalize.tfidf_normalize", "modulename": "scmkl.tfidf_normalize", "qualname": "tfidf_normalize", "kind": "function", "doc": "<p>Function to TFIDF normalize the data in an adata object. If any \nrows are entirely 0, that row and its metadata will be removed from\nthe object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p><code>adata.X</code> to be normalized. If <code>'train_indices'</code> and \n      <code>'test_indices'</code> in <code>'adata.uns.keys()'</code>, normalization will be\n      done separately for the training and testing data. Otherwise, \n      it will calculate it on the entire dataset.</p>\n</blockquote>\n\n<p><strong>binarize</strong> : <em>bool</em> </p>\n\n<blockquote>\n  <p>If <code>True</code>, all values in <code>adata.X</code> greater than 1 will become \n      1.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>adata with adata.X TFIDF normalized. Will now have the train \n      data stacked on test data, and the indices will be adjusted \n      accordingly.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">create_adata</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data_mat</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"n\">gene_names</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                           <span class=\"n\">group_dict</span> <span class=\"o\">=</span> <span class=\"n\">group_dict</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">tfidf_normalize</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">binarize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scmkl.train_model", "modulename": "scmkl.train_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scmkl.train_model.train_model", "modulename": "scmkl.train_model", "qualname": "train_model", "kind": "function", "doc": "<p>Fit a grouplasso model to the provided data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Has <code>'Z_train'</code> and <code>'Z_test'</code> keys in <code>adata.uns</code>.</p>\n</blockquote>\n\n<p><strong>group_size</strong> : <em>int</em> </p>\n\n<blockquote>\n  <p>Argument describing how the features are grouped. Should be\n      <code>2 * D</code>. For more information see \n      <a href=\"https://mathurinm.github.io/celer/generated/celer.GroupLasso.html\">celer documentation</a>.</p>\n</blockquote>\n\n<p><strong>alpha</strong> : <em>float</em></p>\n\n<blockquote>\n  <p>Group Lasso regularization coefficient. alpha is a floating \n      point value controlling model solution sparsity. Must be a \n      positive float. The smaller the value, the more feature groups \n      will be selected in the trained model.</p>\n</blockquote>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><strong>adata</strong> : <em>AnnData</em> </p>\n\n<blockquote>\n  <p>Trained model accessible with <code>adata.uns['model']</code>.</p>\n</blockquote>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">estimate_sigma</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">calculate_z</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">scmkl</span><span class=\"o\">.</span><span class=\"n\">train_model</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AUROC&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F1-Score&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Accuracy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Precision&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                            <span class=\"s1\">&#39;Recall&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;model&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">uns</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adata</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();